//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: org/jfugue/rhythm/Rhythm.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "java/lang/Character.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/jfugue/pattern/Pattern.h"
#include "org/jfugue/rhythm/Rhythm.h"
#include "org/jfugue/rhythm/RhythmAltLayerProvider.h"
#include "org/jfugue/theory/TimeSignature.h"
#include "org/staccato/StaccatoUtil.h"

BOOL OrgJfugueRhythmRhythm_initialized = NO;

@implementation OrgJfugueRhythmRhythm

OrgJfugueTheoryTimeSignature * OrgJfugueRhythmRhythm_DEFAULT_TIME_SIGNATURE_;
id<JavaUtilMap> OrgJfugueRhythmRhythm_DEFAULT_RHYTHM_KIT_;

- (instancetype)init {
  return [self initOrgJfugueRhythmRhythmWithOrgJfugueTheoryTimeSignature:OrgJfugueRhythmRhythm_DEFAULT_TIME_SIGNATURE_ withJavaUtilMap:OrgJfugueRhythmRhythm_DEFAULT_RHYTHM_KIT_];
}

- (instancetype)initWithNSStringArray:(IOSObjectArray *)layers {
  return [self initOrgJfugueRhythmRhythmWithOrgJfugueTheoryTimeSignature:OrgJfugueRhythmRhythm_DEFAULT_TIME_SIGNATURE_ withJavaUtilMap:OrgJfugueRhythmRhythm_DEFAULT_RHYTHM_KIT_ withNSStringArray:layers];
}

- (instancetype)initOrgJfugueRhythmRhythmWithOrgJfugueTheoryTimeSignature:(OrgJfugueTheoryTimeSignature *)timeSig
                                                          withJavaUtilMap:(id<JavaUtilMap>)rhythmKit {
  if (self = [super init]) {
    length_ = 1;
    layers_ = [[JavaUtilArrayList alloc] init];
    altLayers_ = [[JavaUtilHashMap alloc] init];
    (void) [self setTimeSignatureWithOrgJfugueTheoryTimeSignature:timeSig];
    (void) [self setRhythmKitWithJavaUtilMap:rhythmKit];
  }
  return self;
}

- (instancetype)initWithOrgJfugueTheoryTimeSignature:(OrgJfugueTheoryTimeSignature *)timeSig
                                     withJavaUtilMap:(id<JavaUtilMap>)rhythmKit {
  return [self initOrgJfugueRhythmRhythmWithOrgJfugueTheoryTimeSignature:timeSig withJavaUtilMap:rhythmKit];
}

- (instancetype)initOrgJfugueRhythmRhythmWithOrgJfugueTheoryTimeSignature:(OrgJfugueTheoryTimeSignature *)timeSig
                                                          withJavaUtilMap:(id<JavaUtilMap>)rhythmKit
                                                        withNSStringArray:(IOSObjectArray *)layers {
  if (self = [self initOrgJfugueRhythmRhythmWithOrgJfugueTheoryTimeSignature:timeSig withJavaUtilMap:rhythmKit]) {
    {
      IOSObjectArray *a__ = layers;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *layer = *b__++;
        (void) [self addLayerWithNSString:layer];
      }
    }
  }
  return self;
}

- (instancetype)initWithOrgJfugueTheoryTimeSignature:(OrgJfugueTheoryTimeSignature *)timeSig
                                     withJavaUtilMap:(id<JavaUtilMap>)rhythmKit
                                   withNSStringArray:(IOSObjectArray *)layers {
  return [self initOrgJfugueRhythmRhythmWithOrgJfugueTheoryTimeSignature:timeSig withJavaUtilMap:rhythmKit withNSStringArray:layers];
}

- (OrgJfugueRhythmRhythm *)setTimeSignatureWithOrgJfugueTheoryTimeSignature:(OrgJfugueTheoryTimeSignature *)timeSig {
  self->timeSig_ = timeSig;
  return self;
}

- (OrgJfugueTheoryTimeSignature *)getTimeSignature {
  return self->timeSig_;
}

- (OrgJfugueRhythmRhythm *)setRhythmKitWithJavaUtilMap:(id<JavaUtilMap>)rhythmKit {
  self->rhythmKit_ = rhythmKit;
  return self;
}

- (id<JavaUtilMap>)getRhythmKit {
  return self->rhythmKit_;
}

- (OrgJfugueRhythmRhythm *)addLayerWithNSString:(NSString *)layer {
  if ([((id<JavaUtilList>) nil_chk(self->layers_)) size] < OrgJfugueRhythmRhythm_MAX_LAYERS) {
    [self->layers_ addWithId:layer];
  }
  return self;
}

- (NSString *)getLayerWithInt:(jint)layer {
  return [((id<JavaUtilList>) nil_chk(self->layers_)) getWithInt:layer];
}

- (id<JavaUtilList>)getLayers {
  return self->layers_;
}

- (OrgJfugueRhythmRhythm *)setLayersWithJavaUtilList:(id<JavaUtilList>)layers {
  if ([((id<JavaUtilList>) nil_chk(layers)) size] > OrgJfugueRhythmRhythm_MAX_LAYERS) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:JreStrcat("$I", @"Size of the List<String> provided to Rhythm.setLayers() is greater than ", OrgJfugueRhythmRhythm_MAX_LAYERS)];
  }
  self->layers_ = layers;
  return self;
}

- (IOSObjectArray *)getLayersForSegmentWithInt:(jint)segment {
  IOSObjectArray *retVal = [IOSObjectArray newArrayWithLength:[((id<JavaUtilList>) nil_chk(layers_)) size] type:[IOSClass classWithClass:[NSString class]]];
  for (jint layer = 0; layer < [layers_ size]; layer++) {
    id<JavaUtilList> altLayers = [self getSortedAltLayersForLayerWithInt:layer];
    IOSObjectArray_Set(retVal, layer, [self getLayerWithInt:layer]);
    for (OrgJfugueRhythmRhythm_AltLayer * __strong altLayer in nil_chk(altLayers)) {
      if ([((OrgJfugueRhythmRhythm_AltLayer *) nil_chk(altLayer)) shouldProvideAltLayerWithInt:segment]) {
        NSString *rhythmOrNull = [altLayer getAltLayerWithInt:segment];
        if (rhythmOrNull != nil) {
          IOSObjectArray_Set(retVal, layer, rhythmOrNull);
        }
      }
    }
  }
  return retVal;
}

- (jboolean)canAddLayer {
  return ([((id<JavaUtilList>) nil_chk(self->layers_)) size] < OrgJfugueRhythmRhythm_MAX_LAYERS);
}

- (OrgJfugueRhythmRhythm *)clone {
  return [[OrgJfugueRhythmRhythm alloc] initWithOrgJfugueTheoryTimeSignature:self->timeSig_ withJavaUtilMap:self->rhythmKit_ withNSStringArray:[((id<JavaUtilList>) nil_chk([self getLayers])) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:[IOSClass classWithClass:[NSString class]]]]];
}

- (id<JavaUtilList>)getAltLayersForLayerWithInt:(jint)layer {
  if ([((id<JavaUtilMap>) nil_chk(altLayers_)) getWithId:JavaLangInteger_valueOfWithInt_(layer)] == nil) {
    (void) [altLayers_ putWithId:JavaLangInteger_valueOfWithInt_(layer) withId:[[JavaUtilArrayList alloc] init]];
  }
  return [altLayers_ getWithId:JavaLangInteger_valueOfWithInt_(layer)];
}

- (id<JavaUtilList>)getSortedAltLayersForLayerWithInt:(jint)layer {
  id<JavaUtilList> retVal = [self getAltLayersForLayerWithInt:layer];
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(retVal, [[OrgJfugueRhythmRhythm_$1 alloc] init]);
  return retVal;
}

- (OrgJfugueRhythmRhythm *)addRecurringAltLayerWithInt:(jint)layer
                                               withInt:(jint)start
                                               withInt:(jint)end
                                               withInt:(jint)recurrence
                                          withNSString:(NSString *)rhythmString {
  return [self addRecurringAltLayerWithInt:layer withInt:start withInt:end withInt:recurrence withNSString:rhythmString withInt:1];
}

- (OrgJfugueRhythmRhythm *)addRecurringAltLayerWithInt:(jint)layer
                                               withInt:(jint)start
                                               withInt:(jint)end
                                               withInt:(jint)recurrence
                                          withNSString:(NSString *)rhythmString
                                               withInt:(jint)zOrder {
  [((id<JavaUtilList>) nil_chk([self getAltLayersForLayerWithInt:layer])) addWithId:[[OrgJfugueRhythmRhythm_AltLayer alloc] initWithOrgJfugueRhythmRhythm:self withInt:start withInt:end withInt:recurrence withNSString:rhythmString withOrgJfugueRhythmRhythmAltLayerProvider:nil withInt:zOrder]];
  return self;
}

- (OrgJfugueRhythmRhythm *)addRangedAltLayerWithInt:(jint)layer
                                            withInt:(jint)start
                                            withInt:(jint)end
                                       withNSString:(NSString *)rhythmString {
  return [self addRangedAltLayerWithInt:layer withInt:start withInt:end withNSString:rhythmString withInt:2];
}

- (OrgJfugueRhythmRhythm *)addRangedAltLayerWithInt:(jint)layer
                                            withInt:(jint)start
                                            withInt:(jint)end
                                       withNSString:(NSString *)rhythmString
                                            withInt:(jint)zOrder {
  [((id<JavaUtilList>) nil_chk([self getAltLayersForLayerWithInt:layer])) addWithId:[[OrgJfugueRhythmRhythm_AltLayer alloc] initWithOrgJfugueRhythmRhythm:self withInt:start withInt:end withInt:-1 withNSString:rhythmString withOrgJfugueRhythmRhythmAltLayerProvider:nil withInt:zOrder]];
  return self;
}

- (OrgJfugueRhythmRhythm *)addOneTimeAltLayerWithInt:(jint)layer
                                             withInt:(jint)oneTime
                                        withNSString:(NSString *)rhythmString {
  return [self addOneTimeAltLayerWithInt:layer withInt:oneTime withNSString:rhythmString withInt:3];
}

- (OrgJfugueRhythmRhythm *)addOneTimeAltLayerWithInt:(jint)layer
                                             withInt:(jint)oneTime
                                        withNSString:(NSString *)rhythmString
                                             withInt:(jint)zOrder {
  [((id<JavaUtilList>) nil_chk([self getAltLayersForLayerWithInt:layer])) addWithId:[[OrgJfugueRhythmRhythm_AltLayer alloc] initWithOrgJfugueRhythmRhythm:self withInt:oneTime withInt:oneTime withInt:-1 withNSString:rhythmString withOrgJfugueRhythmRhythmAltLayerProvider:nil withInt:zOrder]];
  return self;
}

- (OrgJfugueRhythmRhythm *)addAltLayerProviderWithInt:(jint)layer
            withOrgJfugueRhythmRhythmAltLayerProvider:(id<OrgJfugueRhythmRhythmAltLayerProvider>)altLayerProvider {
  return [self addAltLayerProviderWithInt:layer withOrgJfugueRhythmRhythmAltLayerProvider:altLayerProvider withInt:4];
}

- (OrgJfugueRhythmRhythm *)addAltLayerProviderWithInt:(jint)layer
            withOrgJfugueRhythmRhythmAltLayerProvider:(id<OrgJfugueRhythmRhythmAltLayerProvider>)altLayerProvider
                                              withInt:(jint)zOrder {
  [((id<JavaUtilList>) nil_chk([self getAltLayersForLayerWithInt:layer])) addWithId:[[OrgJfugueRhythmRhythm_AltLayer alloc] initWithOrgJfugueRhythmRhythm:self withInt:0 withInt:[self getLength] withInt:-1 withNSString:nil withOrgJfugueRhythmRhythmAltLayerProvider:altLayerProvider withInt:zOrder]];
  return self;
}

+ (OrgJfugueRhythmRhythm *)combineWithOrgJfugueRhythmRhythmArray:(IOSObjectArray *)rhythms {
  return OrgJfugueRhythmRhythm_combineWithOrgJfugueRhythmRhythmArray_(rhythms);
}

- (OrgJfugueRhythmRhythm *)setLengthWithInt:(jint)length {
  self->length_ = length;
  return self;
}

- (jint)getLength {
  return self->length_;
}

- (NSString *)getStaccatoStringForRhythmWithNSString:(NSString *)rhythm {
  JavaLangStringBuilder *buddy = [[JavaLangStringBuilder alloc] init];
  {
    IOSCharArray *a__ = [((NSString *) nil_chk(rhythm)) toCharArray];
    jchar const *b__ = ((IOSCharArray *) nil_chk(a__))->buffer_;
    jchar const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jchar ch = *b__++;
      if ([((id<JavaUtilMap>) nil_chk(rhythmKit_)) getWithId:JavaLangCharacter_valueOfWithChar_(ch)] != nil) {
        (void) [buddy appendWithNSString:[rhythmKit_ getWithId:JavaLangCharacter_valueOfWithChar_(ch)]];
        (void) [buddy appendWithNSString:@" "];
      }
      else {
        @throw [[JavaLangRuntimeException alloc] initWithNSString:JreStrcat("$C$$$@", @"The character '", ch, @"' used in the rhythm layer \"", rhythm, @"\" is not associated with a Staccato music string in the RhythmKit ", rhythmKit_)];
      }
    }
  }
  return [((NSString *) nil_chk([buddy description])) trim];
}

- (OrgJfuguePatternPattern *)getPattern {
  JavaLangStringBuilder *buddy = [[JavaLangStringBuilder alloc] init];
  (void) [buddy appendWithNSString:OrgStaccatoStaccatoUtil_createTrackElementWithByte_((jbyte) 9)];
  (void) [buddy appendWithNSString:@" "];
  for (jint segment = 0; segment < [self getLength]; segment++) {
    jbyte layerCounter = 0;
    {
      IOSObjectArray *a__ = [self getLayersForSegmentWithInt:segment];
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *layer = *b__++;
        (void) [buddy appendWithNSString:OrgStaccatoStaccatoUtil_createLayerElementWithByte_(layerCounter)];
        (void) [buddy appendWithNSString:@" "];
        layerCounter++;
        (void) [buddy appendWithNSString:[self getStaccatoStringForRhythmWithNSString:layer]];
        (void) [buddy appendWithNSString:@" "];
      }
    }
  }
  return [[OrgJfuguePatternPattern alloc] initWithNSString:[((NSString *) nil_chk([buddy description])) trim]];
}

- (IOSObjectArray *)getRhythm {
  IOSObjectArray *builders = [IOSObjectArray newArrayWithLength:[((id<JavaUtilList>) nil_chk(self->layers_)) size] type:[IOSClass classWithClass:[JavaLangStringBuilder class]]];
  for (jint i = 0; i < [layers_ size]; i++) {
    IOSObjectArray_SetAndConsume(builders, i, [[JavaLangStringBuilder alloc] init]);
    for (jint segment = 0; segment < [self getLength]; segment++) {
      (void) [((JavaLangStringBuilder *) nil_chk(IOSObjectArray_Get(builders, i))) appendWithNSString:IOSObjectArray_Get(nil_chk([self getLayersForSegmentWithInt:segment]), i)];
    }
  }
  IOSObjectArray *retVal = [IOSObjectArray newArrayWithLength:[self->layers_ size] type:[IOSClass classWithClass:[NSString class]]];
  for (jint i = 0; i < [layers_ size]; i++) {
    IOSObjectArray_Set(retVal, i, [((JavaLangStringBuilder *) nil_chk(IOSObjectArray_Get(builders, i))) description]);
  }
  return retVal;
}

- (void)copyAllFieldsTo:(OrgJfugueRhythmRhythm *)other {
  [super copyAllFieldsTo:other];
  other->layers_ = layers_;
  other->altLayers_ = altLayers_;
  other->timeSig_ = timeSig_;
  other->rhythmKit_ = rhythmKit_;
  other->length_ = length_;
}

+ (void)initialize {
  if (self == [OrgJfugueRhythmRhythm class]) {
    OrgJfugueRhythmRhythm_DEFAULT_TIME_SIGNATURE_ = [[OrgJfugueTheoryTimeSignature alloc] initWithInt:4 withInt:4];
    OrgJfugueRhythmRhythm_DEFAULT_RHYTHM_KIT_ = [[OrgJfugueRhythmRhythm_$2 alloc] init];
    J2OBJC_SET_INITIALIZED(OrgJfugueRhythmRhythm)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Rhythm", NULL, 0x1, NULL },
    { "initWithNSStringArray:", "Rhythm", NULL, 0x81, NULL },
    { "initWithOrgJfugueTheoryTimeSignature:withJavaUtilMap:", "Rhythm", NULL, 0x1, NULL },
    { "initWithOrgJfugueTheoryTimeSignature:withJavaUtilMap:withNSStringArray:", "Rhythm", NULL, 0x81, NULL },
    { "setTimeSignatureWithOrgJfugueTheoryTimeSignature:", "setTimeSignature", "Lorg.jfugue.rhythm.Rhythm;", 0x1, NULL },
    { "getTimeSignature", NULL, "Lorg.jfugue.theory.TimeSignature;", 0x1, NULL },
    { "setRhythmKitWithJavaUtilMap:", "setRhythmKit", "Lorg.jfugue.rhythm.Rhythm;", 0x1, NULL },
    { "getRhythmKit", NULL, "Ljava.util.Map;", 0x1, NULL },
    { "addLayerWithNSString:", "addLayer", "Lorg.jfugue.rhythm.Rhythm;", 0x1, NULL },
    { "getLayerWithInt:", "getLayer", "Ljava.lang.String;", 0x1, NULL },
    { "getLayers", NULL, "Ljava.util.List;", 0x1, NULL },
    { "setLayersWithJavaUtilList:", "setLayers", "Lorg.jfugue.rhythm.Rhythm;", 0x1, NULL },
    { "getLayersForSegmentWithInt:", "getLayersForSegment", "[Ljava.lang.String;", 0x1, NULL },
    { "canAddLayer", NULL, "Z", 0x1, NULL },
    { "clone", NULL, "Lorg.jfugue.rhythm.Rhythm;", 0x1, NULL },
    { "getAltLayersForLayerWithInt:", "getAltLayersForLayer", "Ljava.util.List;", 0x1, NULL },
    { "getSortedAltLayersForLayerWithInt:", "getSortedAltLayersForLayer", "Ljava.util.List;", 0x1, NULL },
    { "addRecurringAltLayerWithInt:withInt:withInt:withInt:withNSString:", "addRecurringAltLayer", "Lorg.jfugue.rhythm.Rhythm;", 0x1, NULL },
    { "addRecurringAltLayerWithInt:withInt:withInt:withInt:withNSString:withInt:", "addRecurringAltLayer", "Lorg.jfugue.rhythm.Rhythm;", 0x1, NULL },
    { "addRangedAltLayerWithInt:withInt:withInt:withNSString:", "addRangedAltLayer", "Lorg.jfugue.rhythm.Rhythm;", 0x1, NULL },
    { "addRangedAltLayerWithInt:withInt:withInt:withNSString:withInt:", "addRangedAltLayer", "Lorg.jfugue.rhythm.Rhythm;", 0x1, NULL },
    { "addOneTimeAltLayerWithInt:withInt:withNSString:", "addOneTimeAltLayer", "Lorg.jfugue.rhythm.Rhythm;", 0x1, NULL },
    { "addOneTimeAltLayerWithInt:withInt:withNSString:withInt:", "addOneTimeAltLayer", "Lorg.jfugue.rhythm.Rhythm;", 0x1, NULL },
    { "addAltLayerProviderWithInt:withOrgJfugueRhythmRhythmAltLayerProvider:", "addAltLayerProvider", "Lorg.jfugue.rhythm.Rhythm;", 0x1, NULL },
    { "addAltLayerProviderWithInt:withOrgJfugueRhythmRhythmAltLayerProvider:withInt:", "addAltLayerProvider", "Lorg.jfugue.rhythm.Rhythm;", 0x1, NULL },
    { "combineWithOrgJfugueRhythmRhythmArray:", "combine", "Lorg.jfugue.rhythm.Rhythm;", 0x89, NULL },
    { "setLengthWithInt:", "setLength", "Lorg.jfugue.rhythm.Rhythm;", 0x1, NULL },
    { "getLength", NULL, "I", 0x1, NULL },
    { "getStaccatoStringForRhythmWithNSString:", "getStaccatoStringForRhythm", "Ljava.lang.String;", 0x1, NULL },
    { "getPattern", NULL, "Lorg.jfugue.pattern.Pattern;", 0x1, NULL },
    { "getRhythm", NULL, "[Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "layers_", NULL, 0x2, "Ljava.util.List;", NULL,  },
    { "altLayers_", NULL, 0x2, "Ljava.util.Map;", NULL,  },
    { "timeSig_", NULL, 0x2, "Lorg.jfugue.theory.TimeSignature;", NULL,  },
    { "rhythmKit_", NULL, 0x2, "Ljava.util.Map;", NULL,  },
    { "length_", NULL, 0x2, "I", NULL,  },
    { "MAX_LAYERS_", NULL, 0x19, "I", NULL, .constantValue.asInt = OrgJfugueRhythmRhythm_MAX_LAYERS },
    { "DEFAULT_TIME_SIGNATURE_", NULL, 0x19, "Lorg.jfugue.theory.TimeSignature;", &OrgJfugueRhythmRhythm_DEFAULT_TIME_SIGNATURE_,  },
    { "DEFAULT_RHYTHM_KIT_", NULL, 0x19, "Ljava.util.Map;", &OrgJfugueRhythmRhythm_DEFAULT_RHYTHM_KIT_,  },
  };
  static const J2ObjcClassInfo _OrgJfugueRhythmRhythm = { "Rhythm", "org.jfugue.rhythm", NULL, 0x1, 31, methods, 8, fields, 0, NULL};
  return &_OrgJfugueRhythmRhythm;
}

@end

OrgJfugueRhythmRhythm *OrgJfugueRhythmRhythm_combineWithOrgJfugueRhythmRhythmArray_(IOSObjectArray *rhythms) {
  OrgJfugueRhythmRhythm_init();
  OrgJfugueRhythmRhythm *retVal = [[OrgJfugueRhythmRhythm alloc] init];
  {
    IOSObjectArray *a__ = rhythms;
    OrgJfugueRhythmRhythm * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgJfugueRhythmRhythm * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgJfugueRhythmRhythm *rhythm = *b__++;
      [((id<JavaUtilMap>) nil_chk([retVal getRhythmKit])) putAllWithJavaUtilMap:[((OrgJfugueRhythmRhythm *) nil_chk(rhythm)) getRhythmKit]];
      for (NSString * __strong layer in nil_chk([rhythm getLayers])) {
        if ([retVal canAddLayer]) {
          (void) [retVal addLayerWithNSString:layer];
        }
        else {
          return retVal;
        }
      }
      for (JavaLangInteger *boxed__ in nil_chk([((id<JavaUtilMap>) nil_chk(rhythm->altLayers_)) keySet])) {
        jint key = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
        [((id<JavaUtilList>) nil_chk([retVal getAltLayersForLayerWithInt:key])) addAllWithJavaUtilCollection:[rhythm getAltLayersForLayerWithInt:key]];
      }
      if ([retVal getLength] < [rhythm getLength]) {
        (void) [retVal setLengthWithInt:[rhythm getLength]];
      }
    }
  }
  return retVal;
}

@implementation OrgJfugueRhythmRhythm_AltLayer

- (instancetype)initWithOrgJfugueRhythmRhythm:(OrgJfugueRhythmRhythm *)outer$
                                      withInt:(jint)start
                                      withInt:(jint)end
                                      withInt:(jint)recurrence
                                 withNSString:(NSString *)rhythmString
    withOrgJfugueRhythmRhythmAltLayerProvider:(id<OrgJfugueRhythmRhythmAltLayerProvider>)altLayerProvider
                                      withInt:(jint)zOrder {
  if (self = [super init]) {
    self->startIndex_ = start;
    self->endIndex_ = end;
    self->recurrence_ = recurrence;
    self->rhythmString_ = rhythmString;
    self->altLayerProvider_ = altLayerProvider;
    self->zOrder_ = zOrder;
  }
  return self;
}

- (jboolean)shouldProvideAltLayerWithInt:(jint)segment {
  if (altLayerProvider_ != nil) {
    return YES;
  }
  if ((segment >= startIndex_) && (segment <= endIndex_)) {
    if (recurrence_ == -1) return YES;
    if ((recurrence_ != -1) && (segment % (recurrence_) == startIndex_)) return YES;
  }
  return NO;
}

- (NSString *)getAltLayerWithInt:(jint)segment {
  if (altLayerProvider_ != nil) {
    return [altLayerProvider_ provideAltLayerWithInt:segment];
  }
  else {
    return self->rhythmString_;
  }
}

- (void)copyAllFieldsTo:(OrgJfugueRhythmRhythm_AltLayer *)other {
  [super copyAllFieldsTo:other];
  other->rhythmString_ = rhythmString_;
  other->altLayerProvider_ = altLayerProvider_;
  other->startIndex_ = startIndex_;
  other->endIndex_ = endIndex_;
  other->recurrence_ = recurrence_;
  other->zOrder_ = zOrder_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJfugueRhythmRhythm:withInt:withInt:withInt:withNSString:withOrgJfugueRhythmRhythmAltLayerProvider:withInt:", "AltLayer", NULL, 0x1, NULL },
    { "shouldProvideAltLayerWithInt:", "shouldProvideAltLayer", "Z", 0x1, NULL },
    { "getAltLayerWithInt:", "getAltLayer", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "rhythmString_", NULL, 0x1, "Ljava.lang.String;", NULL,  },
    { "altLayerProvider_", NULL, 0x1, "Lorg.jfugue.rhythm.RhythmAltLayerProvider;", NULL,  },
    { "startIndex_", NULL, 0x1, "I", NULL,  },
    { "endIndex_", NULL, 0x1, "I", NULL,  },
    { "recurrence_", NULL, 0x1, "I", NULL,  },
    { "zOrder_", NULL, 0x1, "I", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJfugueRhythmRhythm_AltLayer = { "AltLayer", "org.jfugue.rhythm", "Rhythm", 0x0, 3, methods, 6, fields, 0, NULL};
  return &_OrgJfugueRhythmRhythm_AltLayer;
}

@end

@implementation OrgJfugueRhythmRhythm_$1

- (jint)compareWithId:(OrgJfugueRhythmRhythm_AltLayer *)altLayer1
               withId:(OrgJfugueRhythmRhythm_AltLayer *)altLayer2 {
  if (((OrgJfugueRhythmRhythm_AltLayer *) nil_chk(altLayer1))->zOrder_ < ((OrgJfugueRhythmRhythm_AltLayer *) nil_chk(altLayer2))->zOrder_) return -1;
  if (altLayer1->zOrder_ > altLayer2->zOrder_) return 1;
  return 0;
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithOrgJfugueRhythmRhythm_AltLayer:withOrgJfugueRhythmRhythm_AltLayer:", "compare", "I", 0x1, NULL },
    { "init", NULL, NULL, 0x0, NULL },
  };
  static const J2ObjcClassInfo _OrgJfugueRhythmRhythm_$1 = { "$1", "org.jfugue.rhythm", "Rhythm", 0x8000, 2, methods, 0, NULL, 0, NULL};
  return &_OrgJfugueRhythmRhythm_$1;
}

@end

@implementation OrgJfugueRhythmRhythm_$2

- (instancetype)init {
  if (self = [super init]) {
    {
      (void) [self putWithId:JavaLangCharacter_valueOfWithChar_('.') withId:@"Ri"];
      (void) [self putWithId:JavaLangCharacter_valueOfWithChar_('O') withId:@"[BASS_DRUM]i"];
      (void) [self putWithId:JavaLangCharacter_valueOfWithChar_('o') withId:@"Rs [BASS_DRUM]s"];
      (void) [self putWithId:JavaLangCharacter_valueOfWithChar_('S') withId:@"[ACOUSTIC_SNARE]i"];
      (void) [self putWithId:JavaLangCharacter_valueOfWithChar_('s') withId:@"Rs [ACOUSTIC_SNARE]s"];
      (void) [self putWithId:JavaLangCharacter_valueOfWithChar_('^') withId:@"[PEDAL_HI_HAT]i"];
      (void) [self putWithId:JavaLangCharacter_valueOfWithChar_('`') withId:@"[PEDAL_HI_HAT]s Rs"];
      (void) [self putWithId:JavaLangCharacter_valueOfWithChar_('*') withId:@"[CRASH_CYMBAL_1]i"];
      (void) [self putWithId:JavaLangCharacter_valueOfWithChar_('+') withId:@"[CRASH_CYMBAL_1]s Rs"];
      (void) [self putWithId:JavaLangCharacter_valueOfWithChar_('X') withId:@"[HAND_CLAP]i"];
      (void) [self putWithId:JavaLangCharacter_valueOfWithChar_('x') withId:@"Rs [HAND_CLAP]s"];
    }
  }
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x0, NULL },
  };
  static const char *superclass_type_args[] = {"Ljava.lang.Character;", "Ljava.lang.String;"};
  static const J2ObjcClassInfo _OrgJfugueRhythmRhythm_$2 = { "$2", "org.jfugue.rhythm", "Rhythm", 0x8000, 1, methods, 0, NULL, 2, superclass_type_args};
  return &_OrgJfugueRhythmRhythm_$2;
}

@end
