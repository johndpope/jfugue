//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: org/jfugue/theory/Intervals.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "org/jfugue/pattern/Pattern.h"
#include "org/jfugue/pattern/PatternProducer.h"
#include "org/jfugue/provider/NoteProvider.h"
#include "org/jfugue/provider/NoteProviderFactory.h"
#include "org/jfugue/theory/Intervals.h"
#include "org/jfugue/theory/Note.h"

__attribute__((unused)) static jint OrgJfugueTheoryIntervals_calculateHalfstepsFromFlatsAndSharpsWithNSString_(NSString *interval);
__attribute__((unused)) static jint OrgJfugueTheoryIntervals_getNumberPortionOfIntervalWithNSString_(NSString *interval);

BOOL OrgJfugueTheoryIntervals_initialized = NO;

@implementation OrgJfugueTheoryIntervals

id<JavaUtilMap> OrgJfugueTheoryIntervals_wholeNumberDegreeToHalfsteps_;
JavaUtilRegexPattern * OrgJfugueTheoryIntervals_numberPattern_;

- (instancetype)initWithNSString:(NSString *)intervalPattern {
  if (self = [super init]) {
    self->intervalPattern_ = intervalPattern;
  }
  return self;
}

- (OrgJfugueTheoryIntervals *)setRootWithNSString:(NSString *)root {
  return [self setRootWithOrgJfugueTheoryNote:[((id<OrgJfugueProviderNoteProvider>) nil_chk(OrgJfugueProviderNoteProviderFactory_getNoteProvider())) createNoteWithNSString:root]];
}

- (OrgJfugueTheoryIntervals *)setRootWithOrgJfugueTheoryNote:(OrgJfugueTheoryNote *)root {
  self->rootNote_ = root;
  return self;
}

- (OrgJfuguePatternPattern *)getPattern {
  NSAssert((rootNote_ != nil), @"org/jfugue/theory/Intervals.java:70 condition failed: assert (rootNote != null);");
  IOSObjectArray *intervals = [((NSString *) nil_chk(intervalPattern_)) split:@" "];
  OrgJfuguePatternPattern *pattern = [[OrgJfuguePatternPattern alloc] init];
  {
    IOSObjectArray *a__ = intervals;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *interval = *b__++;
      (void) [pattern addWithOrgJfuguePatternPatternProducerArray:[IOSObjectArray newArrayWithObjects:(id[]){ [[OrgJfugueTheoryNote alloc] initWithByte:(jbyte) ([((OrgJfugueTheoryNote *) nil_chk(rootNote_)) getValue] + OrgJfugueTheoryIntervals_getHalfstepsWithNSString_(interval))] } count:1 type:[IOSClass classWithProtocol:@protocol(OrgJfuguePatternPatternProducer)]]];
    }
  }
  return pattern;
}

- (NSString *)getNthIntervalWithInt:(jint)n {
  return IOSObjectArray_Get(nil_chk([((NSString *) nil_chk(intervalPattern_)) split:@" "]), n);
}

- (jint)size {
  return ((IOSObjectArray *) nil_chk([((NSString *) nil_chk(intervalPattern_)) split:@" "]))->size_;
}

+ (jint)getHalfstepsWithNSString:(NSString *)interval {
  return OrgJfugueTheoryIntervals_getHalfstepsWithNSString_(interval);
}

- (IOSIntArray *)toHalfstepArray {
  IOSObjectArray *intervals = [((NSString *) nil_chk(intervalPattern_)) split:@" "];
  IOSIntArray *halfSteps = [IOSIntArray newArrayWithLength:((IOSObjectArray *) nil_chk(intervals))->size_];
  for (jint i = 0; i < intervals->size_; i++) {
    *IOSIntArray_GetRef(halfSteps, i) = OrgJfugueTheoryIntervals_getHalfstepsWithNSString_(IOSObjectArray_Get(intervals, i));
  }
  return halfSteps;
}

+ (jint)calculateHalfstepsFromFlatsAndSharpsWithNSString:(NSString *)interval {
  return OrgJfugueTheoryIntervals_calculateHalfstepsFromFlatsAndSharpsWithNSString_(interval);
}

+ (jint)getNumberPortionOfIntervalWithNSString:(NSString *)interval {
  return OrgJfugueTheoryIntervals_getNumberPortionOfIntervalWithNSString_(interval);
}

- (OrgJfugueTheoryIntervals *)rotateWithInt:(jint)n {
  IOSObjectArray *intervals = [((NSString *) nil_chk(intervalPattern_)) split:@" "];
  n = n % ((IOSObjectArray *) nil_chk(intervals))->size_;
  JavaLangStringBuilder *buddy = [[JavaLangStringBuilder alloc] init];
  for (jint i = 0; i < intervals->size_ - n; i++) {
    (void) [buddy appendWithNSString:IOSObjectArray_Get(intervals, n + i)];
    (void) [buddy appendWithNSString:@" "];
  }
  for (jint i = 0; i < n; i++) {
    (void) [buddy appendWithNSString:IOSObjectArray_Get(intervals, i)];
    (void) [buddy appendWithNSString:@" "];
  }
  self->intervalPattern_ = [((NSString *) nil_chk([buddy description])) trim];
  return self;
}

- (NSString *)description {
  return self->intervalPattern_;
}

- (jboolean)isEqual:(id)o {
  if (!([o isKindOfClass:[OrgJfugueTheoryIntervals class]])) {
    return NO;
  }
  OrgJfugueTheoryIntervals *i2 = (OrgJfugueTheoryIntervals *) check_class_cast(o, [OrgJfugueTheoryIntervals class]);
  return ([((NSString *) nil_chk([((OrgJfugueTheoryIntervals *) nil_chk(i2)) description])) isEqual:[self description]]);
}

- (void)copyAllFieldsTo:(OrgJfugueTheoryIntervals *)other {
  [super copyAllFieldsTo:other];
  other->intervalPattern_ = intervalPattern_;
  other->rootNote_ = rootNote_;
}

+ (void)initialize {
  if (self == [OrgJfugueTheoryIntervals class]) {
    {
      OrgJfugueTheoryIntervals_wholeNumberDegreeToHalfsteps_ = [[JavaUtilHashMap alloc] init];
      (void) [OrgJfugueTheoryIntervals_wholeNumberDegreeToHalfsteps_ putWithId:JavaLangInteger_valueOfWithInt_(1) withId:JavaLangInteger_valueOfWithInt_(0)];
      (void) [OrgJfugueTheoryIntervals_wholeNumberDegreeToHalfsteps_ putWithId:JavaLangInteger_valueOfWithInt_(2) withId:JavaLangInteger_valueOfWithInt_(2)];
      (void) [OrgJfugueTheoryIntervals_wholeNumberDegreeToHalfsteps_ putWithId:JavaLangInteger_valueOfWithInt_(3) withId:JavaLangInteger_valueOfWithInt_(4)];
      (void) [OrgJfugueTheoryIntervals_wholeNumberDegreeToHalfsteps_ putWithId:JavaLangInteger_valueOfWithInt_(4) withId:JavaLangInteger_valueOfWithInt_(5)];
      (void) [OrgJfugueTheoryIntervals_wholeNumberDegreeToHalfsteps_ putWithId:JavaLangInteger_valueOfWithInt_(5) withId:JavaLangInteger_valueOfWithInt_(7)];
      (void) [OrgJfugueTheoryIntervals_wholeNumberDegreeToHalfsteps_ putWithId:JavaLangInteger_valueOfWithInt_(6) withId:JavaLangInteger_valueOfWithInt_(9)];
      (void) [OrgJfugueTheoryIntervals_wholeNumberDegreeToHalfsteps_ putWithId:JavaLangInteger_valueOfWithInt_(7) withId:JavaLangInteger_valueOfWithInt_(11)];
      (void) [OrgJfugueTheoryIntervals_wholeNumberDegreeToHalfsteps_ putWithId:JavaLangInteger_valueOfWithInt_(8) withId:JavaLangInteger_valueOfWithInt_(12)];
      (void) [OrgJfugueTheoryIntervals_wholeNumberDegreeToHalfsteps_ putWithId:JavaLangInteger_valueOfWithInt_(9) withId:JavaLangInteger_valueOfWithInt_(14)];
      (void) [OrgJfugueTheoryIntervals_wholeNumberDegreeToHalfsteps_ putWithId:JavaLangInteger_valueOfWithInt_(10) withId:JavaLangInteger_valueOfWithInt_(16)];
      (void) [OrgJfugueTheoryIntervals_wholeNumberDegreeToHalfsteps_ putWithId:JavaLangInteger_valueOfWithInt_(11) withId:JavaLangInteger_valueOfWithInt_(17)];
      (void) [OrgJfugueTheoryIntervals_wholeNumberDegreeToHalfsteps_ putWithId:JavaLangInteger_valueOfWithInt_(12) withId:JavaLangInteger_valueOfWithInt_(19)];
      (void) [OrgJfugueTheoryIntervals_wholeNumberDegreeToHalfsteps_ putWithId:JavaLangInteger_valueOfWithInt_(13) withId:JavaLangInteger_valueOfWithInt_(21)];
      (void) [OrgJfugueTheoryIntervals_wholeNumberDegreeToHalfsteps_ putWithId:JavaLangInteger_valueOfWithInt_(14) withId:JavaLangInteger_valueOfWithInt_(23)];
      (void) [OrgJfugueTheoryIntervals_wholeNumberDegreeToHalfsteps_ putWithId:JavaLangInteger_valueOfWithInt_(15) withId:JavaLangInteger_valueOfWithInt_(24)];
    }
    OrgJfugueTheoryIntervals_numberPattern_ = JavaUtilRegexPattern_compileWithNSString_(@"\\d+");
    J2OBJC_SET_INITIALIZED(OrgJfugueTheoryIntervals)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "Intervals", NULL, 0x1, NULL },
    { "setRootWithNSString:", "setRoot", "Lorg.jfugue.theory.Intervals;", 0x1, NULL },
    { "setRootWithOrgJfugueTheoryNote:", "setRoot", "Lorg.jfugue.theory.Intervals;", 0x1, NULL },
    { "getPattern", NULL, "Lorg.jfugue.pattern.Pattern;", 0x1, NULL },
    { "getNthIntervalWithInt:", "getNthInterval", "Ljava.lang.String;", 0x1, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "getHalfstepsWithNSString:", "getHalfsteps", "I", 0x9, NULL },
    { "toHalfstepArray", NULL, "[I", 0x1, NULL },
    { "calculateHalfstepsFromFlatsAndSharpsWithNSString:", "calculateHalfstepsFromFlatsAndSharps", "I", 0xa, NULL },
    { "getNumberPortionOfIntervalWithNSString:", "getNumberPortionOfInterval", "I", 0xa, NULL },
    { "rotateWithInt:", "rotate", "Lorg.jfugue.theory.Intervals;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "wholeNumberDegreeToHalfsteps_", NULL, 0xa, "Ljava.util.Map;", &OrgJfugueTheoryIntervals_wholeNumberDegreeToHalfsteps_,  },
    { "intervalPattern_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "rootNote_", NULL, 0x2, "Lorg.jfugue.theory.Note;", NULL,  },
    { "numberPattern_", NULL, 0xa, "Ljava.util.regex.Pattern;", &OrgJfugueTheoryIntervals_numberPattern_,  },
  };
  static const J2ObjcClassInfo _OrgJfugueTheoryIntervals = { "Intervals", "org.jfugue.theory", NULL, 0x1, 13, methods, 4, fields, 0, NULL};
  return &_OrgJfugueTheoryIntervals;
}

@end

jint OrgJfugueTheoryIntervals_getHalfstepsWithNSString_(NSString *interval) {
  OrgJfugueTheoryIntervals_init();
  return [((JavaLangInteger *) nil_chk([((id<JavaUtilMap>) nil_chk(OrgJfugueTheoryIntervals_wholeNumberDegreeToHalfsteps_)) getWithId:JavaLangInteger_valueOfWithInt_(OrgJfugueTheoryIntervals_getNumberPortionOfIntervalWithNSString_(interval))])) intValue] + OrgJfugueTheoryIntervals_calculateHalfstepsFromFlatsAndSharpsWithNSString_(interval);
}

jint OrgJfugueTheoryIntervals_calculateHalfstepsFromFlatsAndSharpsWithNSString_(NSString *interval) {
  OrgJfugueTheoryIntervals_init();
  jint numHalfsteps = 0;
  {
    IOSCharArray *a__ = [((NSString *) nil_chk([((NSString *) nil_chk(interval)) uppercaseString])) toCharArray];
    jchar const *b__ = ((IOSCharArray *) nil_chk(a__))->buffer_;
    jchar const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jchar ch = *b__++;
      if (ch == 'B') {
        numHalfsteps -= 1;
      }
      else if (ch == '#') {
        numHalfsteps += 1;
      }
    }
  }
  return numHalfsteps;
}

jint OrgJfugueTheoryIntervals_getNumberPortionOfIntervalWithNSString_(NSString *interval) {
  OrgJfugueTheoryIntervals_init();
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(OrgJfugueTheoryIntervals_numberPattern_)) matcherWithJavaLangCharSequence:interval];
  if ([((JavaUtilRegexMatcher *) nil_chk(m)) find]) {
    return JavaLangInteger_parseIntWithNSString_([m group]);
  }
  else {
    return 0;
  }
}
