//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: org/jfugue/theory/ChordProgression.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "org/jfugue/pattern/Pattern.h"
#include "org/jfugue/pattern/PatternProducer.h"
#include "org/jfugue/provider/KeyProvider.h"
#include "org/jfugue/provider/KeyProviderFactory.h"
#include "org/jfugue/provider/NoteProvider.h"
#include "org/jfugue/provider/NoteProviderFactory.h"
#include "org/jfugue/theory/Chord.h"
#include "org/jfugue/theory/ChordProgression.h"
#include "org/jfugue/theory/Intervals.h"
#include "org/jfugue/theory/Key.h"
#include "org/jfugue/theory/Note.h"
#include "org/jfugue/theory/Scale.h"
#include "org/staccato/StaccatoUtil.h"

__attribute__((unused)) static void OrgJfugueTheoryChordProgression_createProgressionWithNSStringArray_(OrgJfugueTheoryChordProgression *self, IOSObjectArray *progressionElements);
__attribute__((unused)) static jint OrgJfugueTheoryChordProgression_romanNumeralToIndexWithNSString_(OrgJfugueTheoryChordProgression *self, NSString *romanNumeral);
__attribute__((unused)) static OrgJfuguePatternPattern *OrgJfugueTheoryChordProgression_replaceDollarsWithCandidatesWithNSString_withOrgJfuguePatternPatternProducerArray_withOrgJfuguePatternPatternProducer_(OrgJfugueTheoryChordProgression *self, NSString *sequence, IOSObjectArray *candidates, id<OrgJfuguePatternPatternProducer> underscoreReplacement);

@implementation OrgJfugueTheoryChordProgression

- (instancetype)initWithNSString:(NSString *)progression {
  if (self = [super init]) {
    OrgJfugueTheoryChordProgression_createProgressionWithNSStringArray_(self, [((NSString *) nil_chk(progression)) split:@"[- ]"]);
  }
  return self;
}

- (instancetype)initWithNSStringArray:(IOSObjectArray *)progressionElements {
  if (self = [super init]) {
    OrgJfugueTheoryChordProgression_createProgressionWithNSStringArray_(self, progressionElements);
  }
  return self;
}

- (void)createProgressionWithNSStringArray:(IOSObjectArray *)progressionElements {
  OrgJfugueTheoryChordProgression_createProgressionWithNSStringArray_(self, progressionElements);
}

- (OrgJfugueTheoryChordProgression *)setKeyWithNSString:(NSString *)key {
  return [self setKeyWithOrgJfugueTheoryKey:[((id<OrgJfugueProviderKeyProvider>) nil_chk(OrgJfugueProviderKeyProviderFactory_getKeyProvider())) createKeyWithNSString:key]];
}

- (OrgJfugueTheoryChordProgression *)setKeyWithOrgJfugueTheoryKey:(OrgJfugueTheoryKey *)key {
  self->key_ = key;
  return self;
}

- (OrgJfuguePatternPattern *)getPattern {
  OrgJfuguePatternPattern *pattern = [[OrgJfuguePatternPattern alloc] init];
  {
    IOSObjectArray *a__ = [self getChords];
    OrgJfugueTheoryChord * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgJfugueTheoryChord * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgJfugueTheoryChord *chord = *b__++;
      (void) [pattern addWithOrgJfuguePatternPatternProducerArray:[IOSObjectArray newArrayWithObjects:(id[]){ chord } count:1 type:[IOSClass classWithProtocol:@protocol(OrgJfuguePatternPatternProducer)]]];
    }
  }
  if (allSequence_ != nil) {
    pattern = OrgJfugueTheoryChordProgression_replaceDollarsWithCandidatesWithNSString_withOrgJfuguePatternPatternProducerArray_withOrgJfuguePatternPatternProducer_(self, allSequence_, [self getChords], [[OrgJfuguePatternPattern alloc] initWithOrgJfuguePatternPatternProducerArray:[self getChords]]);
  }
  if (eachSequence_ != nil) {
    OrgJfuguePatternPattern *p2 = [[OrgJfuguePatternPattern alloc] init];
    {
      IOSObjectArray *a__ = [((NSString *) nil_chk([((OrgJfuguePatternPattern *) nil_chk(pattern)) description])) split:@" "];
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *chordString = *b__++;
        OrgJfugueTheoryChord *chord = [[OrgJfugueTheoryChord alloc] initWithNSString:chordString];
        (void) [p2 addWithOrgJfuguePatternPatternProducerArray:[IOSObjectArray newArrayWithObjects:(id[]){ OrgJfugueTheoryChordProgression_replaceDollarsWithCandidatesWithNSString_withOrgJfuguePatternPatternProducerArray_withOrgJfuguePatternPatternProducer_(self, eachSequence_, [chord getNotes], chord) } count:1 type:[IOSClass classWithProtocol:@protocol(OrgJfuguePatternPatternProducer)]]];
      }
    }
    pattern = p2;
  }
  return pattern;
}

- (IOSObjectArray *)getChords {
  IOSObjectArray *chords = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(progressionElements_))->size_ type:[IOSClass classWithClass:[OrgJfugueTheoryChord class]]];
  OrgJfuguePatternPattern *scalePattern = [((OrgJfugueTheoryIntervals *) nil_chk([((OrgJfugueTheoryIntervals *) nil_chk([((OrgJfugueTheoryScale *) nil_chk([((OrgJfugueTheoryKey *) nil_chk(key_)) getScale])) getIntervals])) setRootWithOrgJfugueTheoryNote:[key_ getRootNote]])) getPattern];
  IOSObjectArray *scaleNotes = [((NSString *) nil_chk([((OrgJfuguePatternPattern *) nil_chk(scalePattern)) description])) split:@" "];
  jint counter = 0;
  {
    IOSObjectArray *a__ = progressionElements_;
    NSString * const *b__ = a__->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *progressionElement = *b__++;
      OrgJfugueTheoryNote *rootNote = [((id<OrgJfugueProviderNoteProvider>) nil_chk(OrgJfugueProviderNoteProviderFactory_getNoteProvider())) createNoteWithNSString:IOSObjectArray_Get(nil_chk(scaleNotes), OrgJfugueTheoryChordProgression_romanNumeralToIndexWithNSString_(self, progressionElement))];
      (void) [((OrgJfugueTheoryNote *) nil_chk(rootNote)) useSameDurationAsWithOrgJfugueTheoryNote:[key_ getRootNote]];
      OrgJfugueTheoryIntervals *intervals = OrgJfugueTheoryChord_get_MAJOR_INTERVALS_();
      if (([((NSString *) nil_chk(progressionElement)) charAtWithInt:0] == 'i') || ([progressionElement charAtWithInt:0] == 'v')) {
        intervals = OrgJfugueTheoryChord_get_MINOR_INTERVALS_();
      }
      if (([((NSString *) nil_chk([progressionElement lowercaseString])) indexOfString:@"o"] > 0) || ([((NSString *) nil_chk([progressionElement lowercaseString])) indexOfString:@"d"] > 0)) {
        intervals = OrgJfugueTheoryChord_get_DIMINISHED_INTERVALS_();
      }
      if ([progressionElement hasSuffix:@"7"]) {
        if ([((OrgJfugueTheoryIntervals *) nil_chk(intervals)) isEqual:OrgJfugueTheoryChord_get_MAJOR_INTERVALS_()]) {
          intervals = OrgJfugueTheoryChord_get_MAJOR_SEVENTH_INTERVALS_();
        }
        else if ([intervals isEqual:OrgJfugueTheoryChord_get_MINOR_INTERVALS_()]) {
          intervals = OrgJfugueTheoryChord_get_MINOR_SEVENTH_INTERVALS_();
        }
        else if ([intervals isEqual:OrgJfugueTheoryChord_get_DIMINISHED_INTERVALS_()]) {
          intervals = OrgJfugueTheoryChord_get_DIMINISHED_SEVENTH_INTERVALS_();
        }
      }
      IOSObjectArray_SetAndConsume(chords, counter, [[OrgJfugueTheoryChord alloc] initWithOrgJfugueTheoryNote:rootNote withOrgJfugueTheoryIntervals:intervals]);
      counter++;
    }
  }
  return chords;
}

- (jint)romanNumeralToIndexWithNSString:(NSString *)romanNumeral {
  return OrgJfugueTheoryChordProgression_romanNumeralToIndexWithNSString_(self, romanNumeral);
}

- (NSString *)description {
  return [((OrgJfuguePatternPattern *) nil_chk([self getPattern])) description];
}

- (IOSObjectArray *)toStringArray {
  return [((NSString *) nil_chk([((OrgJfuguePatternPattern *) nil_chk([self getPattern])) description])) split:@" "];
}

- (OrgJfuguePatternPattern *)replaceDollarsWithCandidatesWithNSString:(NSString *)sequence
                             withOrgJfuguePatternPatternProducerArray:(IOSObjectArray *)candidates
                                  withOrgJfuguePatternPatternProducer:(id<OrgJfuguePatternPatternProducer>)underscoreReplacement {
  return OrgJfugueTheoryChordProgression_replaceDollarsWithCandidatesWithNSString_withOrgJfuguePatternPatternProducerArray_withOrgJfuguePatternPatternProducer_(self, sequence, candidates, underscoreReplacement);
}

- (OrgJfugueTheoryChordProgression *)eachChordAsWithNSString:(NSString *)sequence {
  self->eachSequence_ = sequence;
  return self;
}

- (OrgJfugueTheoryChordProgression *)allChordsAsWithNSString:(NSString *)sequence {
  self->allSequence_ = sequence;
  return self;
}

- (void)copyAllFieldsTo:(OrgJfugueTheoryChordProgression *)other {
  [super copyAllFieldsTo:other];
  other->progressionElements_ = progressionElements_;
  other->key_ = key_;
  other->allSequence_ = allSequence_;
  other->eachSequence_ = eachSequence_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "ChordProgression", NULL, 0x1, NULL },
    { "initWithNSStringArray:", "ChordProgression", NULL, 0x1, NULL },
    { "createProgressionWithNSStringArray:", "createProgression", "V", 0x2, NULL },
    { "setKeyWithNSString:", "setKey", "Lorg.jfugue.theory.ChordProgression;", 0x1, NULL },
    { "setKeyWithOrgJfugueTheoryKey:", "setKey", "Lorg.jfugue.theory.ChordProgression;", 0x1, NULL },
    { "getPattern", NULL, "Lorg.jfugue.pattern.Pattern;", 0x1, NULL },
    { "getChords", NULL, "[Lorg.jfugue.theory.Chord;", 0x1, NULL },
    { "romanNumeralToIndexWithNSString:", "romanNumeralToIndex", "I", 0x2, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "toStringArray", NULL, "[Ljava.lang.String;", 0x1, NULL },
    { "replaceDollarsWithCandidatesWithNSString:withOrgJfuguePatternPatternProducerArray:withOrgJfuguePatternPatternProducer:", "replaceDollarsWithCandidates", "Lorg.jfugue.pattern.Pattern;", 0x2, NULL },
    { "eachChordAsWithNSString:", "eachChordAs", "Lorg.jfugue.theory.ChordProgression;", 0x1, NULL },
    { "allChordsAsWithNSString:", "allChordsAs", "Lorg.jfugue.theory.ChordProgression;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "progressionElements_", NULL, 0x2, "[Ljava.lang.String;", NULL,  },
    { "key_", NULL, 0x2, "Lorg.jfugue.theory.Key;", NULL,  },
    { "allSequence_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "eachSequence_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJfugueTheoryChordProgression = { "ChordProgression", "org.jfugue.theory", NULL, 0x1, 13, methods, 4, fields, 0, NULL};
  return &_OrgJfugueTheoryChordProgression;
}

@end

void OrgJfugueTheoryChordProgression_createProgressionWithNSStringArray_(OrgJfugueTheoryChordProgression *self, IOSObjectArray *progressionElements) {
  self->progressionElements_ = progressionElements;
  self->key_ = OrgJfugueTheoryKey_get_DEFAULT_KEY_();
}

jint OrgJfugueTheoryChordProgression_romanNumeralToIndexWithNSString_(OrgJfugueTheoryChordProgression *self, NSString *romanNumeral) {
  NSString *s = [((NSString *) nil_chk(romanNumeral)) lowercaseString];
  if ([((NSString *) nil_chk(s)) hasSuffix:@"o"] || [s hasSuffix:@"d"] || [s hasSuffix:@"7"]) {
    s = [s substring:0 endIndex:((jint) [s length]) - 1];
  }
  if ([((NSString *) nil_chk(s)) isEqual:@"i"]) {
    return 0;
  }
  else if ([s isEqual:@"ii"]) {
    return 1;
  }
  else if ([s isEqual:@"iii"]) {
    return 2;
  }
  else if ([s isEqual:@"iv"]) {
    return 3;
  }
  else if ([s isEqual:@"v"]) {
    return 4;
  }
  else if ([s isEqual:@"vi"]) {
    return 5;
  }
  else if ([s isEqual:@"vii"]) {
    return 6;
  }
  return 0;
}

OrgJfuguePatternPattern *OrgJfugueTheoryChordProgression_replaceDollarsWithCandidatesWithNSString_withOrgJfuguePatternPatternProducerArray_withOrgJfuguePatternPatternProducer_(OrgJfugueTheoryChordProgression *self, NSString *sequence, IOSObjectArray *candidates, id<OrgJfuguePatternPatternProducer> underscoreReplacement) {
  JavaLangStringBuilder *buddy = [[JavaLangStringBuilder alloc] init];
  jint posPrevDollar = -1;
  jint posNextDollar = 0;
  while (posNextDollar < ((jint) [((NSString *) nil_chk(sequence)) length])) {
    posNextDollar = OrgStaccatoStaccatoUtil_findNextOrEndWithNSString_withChar_withInt_(sequence, '$', posPrevDollar);
    if (posPrevDollar + 1 < ((jint) [sequence length])) {
      (void) [buddy appendWithNSString:[sequence substring:posPrevDollar + 1 endIndex:posNextDollar]];
    }
    if (posNextDollar != ((jint) [sequence length])) {
      NSString *selectionString = [sequence substring:posNextDollar + 1 endIndex:posNextDollar + 2];
      if ([((NSString *) nil_chk(selectionString)) isEqual:@"_"]) {
        IOSObjectArray *replacementTokens = [((NSString *) nil_chk([((OrgJfuguePatternPattern *) nil_chk([((id<OrgJfuguePatternPatternProducer>) nil_chk(underscoreReplacement)) getPattern])) description])) split:@" "];
        jint nextSpaceInSequence = OrgStaccatoStaccatoUtil_findNextOrEndWithNSString_withChar_withInt_(sequence, ' ', posNextDollar);
        {
          IOSObjectArray *a__ = replacementTokens;
          NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          NSString * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            NSString *token = *b__++;
            (void) [buddy appendWithNSString:token];
            (void) [buddy appendWithNSString:[sequence substring:posNextDollar + 2 endIndex:nextSpaceInSequence]];
            (void) [buddy appendWithNSString:@" "];
          }
        }
        posNextDollar = nextSpaceInSequence - 1;
      }
      else {
        jint selection = JavaLangInteger_parseIntWithNSString_([sequence substring:posNextDollar + 1 endIndex:posNextDollar + 2]);
        if (selection > ((IOSObjectArray *) nil_chk(candidates))->size_) {
          @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$I$I$", @"The selector $", selection, @" is greater than the number of items to choose from, which has ", candidates->size_, @" items.")];
        }
        (void) [buddy appendWithId:[((id<OrgJfuguePatternPatternProducer>) nil_chk(IOSObjectArray_Get(candidates, selection))) getPattern]];
      }
    }
    posPrevDollar = posNextDollar + 1;
  }
  return [[OrgJfuguePatternPattern alloc] initWithNSString:[((NSString *) nil_chk([buddy description])) trim]];
}
