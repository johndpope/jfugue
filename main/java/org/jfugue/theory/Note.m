//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: org/jfugue/theory/Note.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "org/jfugue/midi/MidiDefaults.h"
#include "org/jfugue/pattern/Pattern.h"
#include "org/jfugue/provider/NoteProvider.h"
#include "org/jfugue/provider/NoteProviderFactory.h"
#include "org/jfugue/theory/Note.h"
#include "org/staccato/DefaultManager.h"

__attribute__((unused)) static jdouble OrgJfugueTheoryNote_truncateTo3DecimalPlacesWithDouble_(jdouble preciseNumber);
__attribute__((unused)) static jdouble OrgJfugueTheoryNote_getPreciseFrequencyForNoteWithInt_(jint noteValue);
__attribute__((unused)) static jdouble OrgJfugueTheoryNote_getFrequencyAboveBaseWithDouble_withDouble_(jdouble baseFrequency, jdouble octavesAboveBase);

BOOL OrgJfugueTheoryNote_initialized = NO;

@implementation OrgJfugueTheoryNote

IOSObjectArray * OrgJfugueTheoryNote_NOTE_NAMES_;
IOSObjectArray * OrgJfugueTheoryNote_PERCUSSION_NAMES_;
OrgJfugueTheoryNote * OrgJfugueTheoryNote_REST_;

- (instancetype)initOrgJfugueTheoryNote {
  if (self = [super init]) {
    isFirstNote__ = YES;
    self->attackVelocity_ = [((OrgStaccatoDefaultManager *) nil_chk(OrgStaccatoDefaultManager_getInstance())) getDefaultAttackVelocity];
    self->decayVelocity_ = [((OrgStaccatoDefaultManager *) nil_chk(OrgStaccatoDefaultManager_getInstance())) getDefaultDecayVelocity];
  }
  return self;
}

- (instancetype)init {
  return [self initOrgJfugueTheoryNote];
}

- (instancetype)initWithNSString:(NSString *)note {
  return [self initOrgJfugueTheoryNoteWithOrgJfugueTheoryNote:[((id<OrgJfugueProviderNoteProvider>) nil_chk(OrgJfugueProviderNoteProviderFactory_getNoteProvider())) createNoteWithNSString:note]];
}

- (instancetype)initOrgJfugueTheoryNoteWithOrgJfugueTheoryNote:(OrgJfugueTheoryNote *)note {
  if (self = [super init]) {
    isFirstNote__ = YES;
    self->value_ = ((OrgJfugueTheoryNote *) nil_chk(note))->value_;
    self->duration_ = note->duration_;
    self->wasDurationExplicitlySet_ = note->wasDurationExplicitlySet_;
    self->attackVelocity_ = note->attackVelocity_;
    self->decayVelocity_ = note->decayVelocity_;
    self->isRest__ = note->isRest__;
    self->isStartOfTie__ = note->isStartOfTie__;
    self->isEndOfTie__ = note->isEndOfTie__;
    self->isFirstNote__ = note->isFirstNote__;
    self->isMelodicNote__ = note->isMelodicNote__;
    self->isHarmonicNote__ = note->isHarmonicNote__;
    self->isPercussionNote__ = note->isPercussionNote__;
    self->originalString_ = note->originalString_;
  }
  return self;
}

- (instancetype)initWithOrgJfugueTheoryNote:(OrgJfugueTheoryNote *)note {
  return [self initOrgJfugueTheoryNoteWithOrgJfugueTheoryNote:note];
}

- (instancetype)initWithInt:(jint)value {
  return [self initOrgJfugueTheoryNoteWithByte:(jbyte) value];
}

- (instancetype)initOrgJfugueTheoryNoteWithByte:(jbyte)value {
  if (self = [self initOrgJfugueTheoryNote]) {
    self->value_ = value;
    (void) [self useDefaultDuration];
  }
  return self;
}

- (instancetype)initWithByte:(jbyte)value {
  return [self initOrgJfugueTheoryNoteWithByte:value];
}

- (instancetype)initWithInt:(jint)value
                 withDouble:(jdouble)duration {
  return [self initOrgJfugueTheoryNoteWithByte:(jbyte) value withDouble:duration];
}

- (instancetype)initOrgJfugueTheoryNoteWithByte:(jbyte)value
                                     withDouble:(jdouble)duration {
  if (self = [self initOrgJfugueTheoryNote]) {
    self->value_ = value;
    (void) [self setDurationWithDouble:duration];
  }
  return self;
}

- (instancetype)initWithByte:(jbyte)value
                  withDouble:(jdouble)duration {
  return [self initOrgJfugueTheoryNoteWithByte:value withDouble:duration];
}

- (OrgJfugueTheoryNote *)setValueWithByte:(jbyte)value {
  self->value_ = value;
  return self;
}

- (jbyte)getValue {
  return self->value_;
}

- (OrgJfugueTheoryNote *)changeValueWithByte:(jbyte)delta {
  return [self setValueWithByte:(jbyte) ([self getValue] + delta)];
}

- (jbyte)getOctave {
  return (jbyte) ([self getValue] / 12);
}

- (jdouble)getDuration {
  return self->duration_;
}

- (OrgJfugueTheoryNote *)setDurationWithDouble:(jdouble)d {
  self->duration_ = d;
  self->wasDurationExplicitlySet_ = YES;
  return self;
}

- (OrgJfugueTheoryNote *)useDefaultDuration {
  self->duration_ = [((OrgStaccatoDefaultManager *) nil_chk(OrgStaccatoDefaultManager_getInstance())) getDefaultDuration];
  return self;
}

- (OrgJfugueTheoryNote *)useSameDurationAsWithOrgJfugueTheoryNote:(OrgJfugueTheoryNote *)note2 {
  self->duration_ = ((OrgJfugueTheoryNote *) nil_chk(note2))->duration_;
  self->wasDurationExplicitlySet_ = note2->wasDurationExplicitlySet_;
  return self;
}

- (OrgJfugueTheoryNote *)setDurationWithNSString:(NSString *)duration {
  return [self setDurationWithDouble:[((id<OrgJfugueProviderNoteProvider>) nil_chk(OrgJfugueProviderNoteProviderFactory_getNoteProvider())) getDurationForStringWithNSString:duration]];
}

- (jboolean)isDurationExplicitlySet {
  return self->wasDurationExplicitlySet_;
}

- (OrgJfugueTheoryNote *)setImplicitDurationForTestingOnlyWithDouble:(jdouble)d {
  self->duration_ = d;
  return self;
}

- (OrgJfugueTheoryNote *)setRestWithBoolean:(jboolean)rest {
  self->isRest__ = rest;
  return self;
}

- (jboolean)isRest {
  return self->isRest__;
}

- (OrgJfugueTheoryNote *)setPercussionNoteWithBoolean:(jboolean)perc {
  self->isPercussionNote__ = perc;
  return self;
}

- (jboolean)isPercussionNote {
  return self->isPercussionNote__;
}

- (OrgJfugueTheoryNote *)setAttackVelocityWithByte:(jbyte)attackVelocity {
  self->attackVelocity_ = attackVelocity;
  return self;
}

- (jbyte)getAttackVelocity {
  return self->attackVelocity_;
}

- (OrgJfugueTheoryNote *)setDecayVelocityWithByte:(jbyte)decayVelocity {
  self->decayVelocity_ = decayVelocity;
  return self;
}

- (jbyte)getDecayVelocity {
  return self->decayVelocity_;
}

- (OrgJfugueTheoryNote *)setStartOfTieWithBoolean:(jboolean)isStartOfTie {
  self->isStartOfTie__ = isStartOfTie;
  return self;
}

- (OrgJfugueTheoryNote *)setEndOfTieWithBoolean:(jboolean)isEndOfTie {
  self->isEndOfTie__ = isEndOfTie;
  return self;
}

- (jboolean)isStartOfTie {
  return isStartOfTie__;
}

- (jboolean)isEndOfTie {
  return isEndOfTie__;
}

- (OrgJfugueTheoryNote *)setFirstNoteWithBoolean:(jboolean)isFirstNote {
  self->isFirstNote__ = isFirstNote;
  return self;
}

- (jboolean)isFirstNote {
  return self->isFirstNote__;
}

- (OrgJfugueTheoryNote *)setMelodicNoteWithBoolean:(jboolean)isMelodicNote {
  self->isMelodicNote__ = isMelodicNote;
  return self;
}

- (jboolean)isMelodicNote {
  return self->isMelodicNote__;
}

- (OrgJfugueTheoryNote *)setHarmonicNoteWithBoolean:(jboolean)isHarmonicNote {
  self->isHarmonicNote__ = isHarmonicNote;
  return self;
}

- (jboolean)isHarmonicNote {
  return self->isHarmonicNote__;
}

- (OrgJfugueTheoryNote *)setOriginalStringWithNSString:(NSString *)originalString {
  self->originalString_ = originalString;
  return self;
}

- (NSString *)getOriginalString {
  return self->originalString_;
}

- (jdouble)getMicrosecondDurationWithDouble:(jdouble)mpq {
  return (self->duration_ * 4.0f) * mpq;
}

- (jbyte)getPositionInOctave {
  return (jbyte) ([self getValue] % 12);
}

+ (OrgJfugueTheoryNote *)createRestWithDouble:(jdouble)duration {
  return OrgJfugueTheoryNote_createRestWithDouble_(duration);
}

+ (NSString *)getToneStringWithByte:(jbyte)noteValue {
  return OrgJfugueTheoryNote_getToneStringWithByte_(noteValue);
}

+ (NSString *)getPercussionStringWithByte:(jbyte)noteValue {
  return OrgJfugueTheoryNote_getPercussionStringWithByte_(noteValue);
}

+ (jdouble)getFrequencyForNoteWithNSString:(NSString *)note {
  return OrgJfugueTheoryNote_getFrequencyForNoteWithNSString_(note);
}

+ (jdouble)getFrequencyForNoteWithInt:(jint)noteValue {
  return OrgJfugueTheoryNote_getFrequencyForNoteWithInt_(noteValue);
}

+ (jdouble)truncateTo3DecimalPlacesWithDouble:(jdouble)preciseNumber {
  return OrgJfugueTheoryNote_truncateTo3DecimalPlacesWithDouble_(preciseNumber);
}

+ (jdouble)getPreciseFrequencyForNoteWithInt:(jint)noteValue {
  return OrgJfugueTheoryNote_getPreciseFrequencyForNoteWithInt_(noteValue);
}

+ (jdouble)getFrequencyAboveBaseWithDouble:(jdouble)baseFrequency
                                withDouble:(jdouble)octavesAboveBase {
  return OrgJfugueTheoryNote_getFrequencyAboveBaseWithDouble_withDouble_(baseFrequency, octavesAboveBase);
}

+ (NSString *)getDurationStringWithDouble:(jdouble)decimalDuration {
  return OrgJfugueTheoryNote_getDurationStringWithDouble_(decimalDuration);
}

+ (NSString *)getDurationStringForBeatWithInt:(jint)beat {
  return OrgJfugueTheoryNote_getDurationStringForBeatWithInt_(beat);
}

- (NSString *)getAttackDecayString {
  JavaLangStringBuilder *buddy = [[JavaLangStringBuilder alloc] init];
  if (self->attackVelocity_ != OrgJfugueMidiMidiDefaults_MIDI_DEFAULT_ATTACK_VELOCITY) {
    (void) [buddy appendWithNSString:JreStrcat("CB", 'a', self->attackVelocity_)];
  }
  if (self->decayVelocity_ != OrgJfugueMidiMidiDefaults_MIDI_DEFAULT_DECAY_VELOCITY) {
    (void) [buddy appendWithNSString:JreStrcat("CB", 'd', self->decayVelocity_)];
  }
  return [buddy description];
}

- (OrgJfuguePatternPattern *)getPattern {
  JavaLangStringBuilder *buddy = [[JavaLangStringBuilder alloc] init];
  (void) [buddy appendWithNSString:[self toStringWithoutDuration]];
  (void) [buddy appendWithNSString:[self getDecoratorString]];
  return [[OrgJfuguePatternPattern alloc] initWithNSString:[buddy description]];
}

- (OrgJfuguePatternPattern *)getPercussionPattern {
  if ([self getValue] < OrgJfugueMidiMidiDefaults_MIN_PERCUSSION_NOTE || [self getValue] > OrgJfugueMidiMidiDefaults_MAX_PERCUSSION_NOTE) return [self getPattern];
  JavaLangStringBuilder *buddy = [[JavaLangStringBuilder alloc] init];
  (void) [buddy appendWithNSString:OrgJfugueTheoryNote_getPercussionStringWithByte_([self getValue])];
  (void) [buddy appendWithNSString:[self getDecoratorString]];
  return [[OrgJfuguePatternPattern alloc] initWithNSString:[buddy description]];
}

- (NSString *)description {
  return [((OrgJfuguePatternPattern *) nil_chk([self getPattern])) description];
}

- (NSString *)toStringWithoutDuration {
  if ([self isRest]) {
    return @"R";
  }
  else if ([self isPercussionNote]) {
    return OrgJfugueTheoryNote_getPercussionStringWithByte_([self getValue]);
  }
  else {
    return (originalString_ != nil) ? self->originalString_ : OrgJfugueTheoryNote_getToneStringWithByte_([self getValue]);
  }
}

- (NSString *)getDecoratorString {
  JavaLangStringBuilder *buddy = [[JavaLangStringBuilder alloc] init];
  if ([self isDurationExplicitlySet]) {
    (void) [buddy appendWithNSString:OrgJfugueTheoryNote_getDurationStringWithDouble_(self->duration_)];
  }
  (void) [buddy appendWithNSString:[self getAttackDecayString]];
  return [buddy description];
}

- (jboolean)isEqual:(id)o {
  if (!([o isKindOfClass:[OrgJfugueTheoryNote class]])) {
    return NO;
  }
  OrgJfugueTheoryNote *n2 = (OrgJfugueTheoryNote *) check_class_cast(o, [OrgJfugueTheoryNote class]);
  jboolean originalStringsMatchSufficientlyWell = ((((OrgJfugueTheoryNote *) nil_chk(n2))->originalString_ == nil) || (self->originalString_ == nil)) ? YES : [n2->originalString_ equalsIgnoreCase:self->originalString_];
  return ((n2->value_ == self->value_) && (n2->duration_ == self->duration_) && (n2->wasDurationExplicitlySet_ == self->wasDurationExplicitlySet_) && (n2->isEndOfTie__ == self->isEndOfTie__) && (n2->isStartOfTie__ == self->isStartOfTie__) && (n2->isMelodicNote__ == self->isMelodicNote__) && (n2->isHarmonicNote__ == self->isHarmonicNote__) && (n2->isPercussionNote__ == self->isPercussionNote__) && (n2->isFirstNote__ == self->isFirstNote__) && (n2->isRest__ == self->isRest__) && (n2->attackVelocity_ == self->attackVelocity_) && (n2->decayVelocity_ == self->decayVelocity_) && originalStringsMatchSufficientlyWell);
}

- (NSString *)toDebugString {
  JavaLangStringBuffer *buffy = [[JavaLangStringBuffer alloc] init];
  (void) [buffy appendWithNSString:@"Note:"];
  (void) [buffy appendWithNSString:@" value="];
  (void) [buffy appendWithInt:self->value_];
  (void) [buffy appendWithNSString:@" duration="];
  (void) [buffy appendWithDouble:self->duration_];
  (void) [buffy appendWithNSString:@" wasDurationExplicitlySet="];
  (void) [buffy appendWithBoolean:self->wasDurationExplicitlySet_];
  (void) [buffy appendWithNSString:@" isEndOfTie="];
  (void) [buffy appendWithBoolean:self->isEndOfTie__];
  (void) [buffy appendWithNSString:@" isStartOfTie="];
  (void) [buffy appendWithBoolean:self->isStartOfTie__];
  (void) [buffy appendWithNSString:@" isMelodicNote="];
  (void) [buffy appendWithBoolean:self->isMelodicNote__];
  (void) [buffy appendWithNSString:@" isHarmonicNote="];
  (void) [buffy appendWithBoolean:self->isHarmonicNote__];
  (void) [buffy appendWithNSString:@" isPercussionNote="];
  (void) [buffy appendWithBoolean:self->isPercussionNote__];
  (void) [buffy appendWithNSString:@" isFirstNote="];
  (void) [buffy appendWithBoolean:self->isFirstNote__];
  (void) [buffy appendWithNSString:@" isRest="];
  (void) [buffy appendWithBoolean:self->isRest__];
  (void) [buffy appendWithNSString:@" attackVelocity="];
  (void) [buffy appendWithInt:self->attackVelocity_];
  (void) [buffy appendWithNSString:@" decayVelocity="];
  (void) [buffy appendWithInt:self->decayVelocity_];
  (void) [buffy appendWithNSString:@" originalString="];
  (void) [buffy appendWithNSString:self->originalString_];
  return [buffy description];
}

- (void)copyAllFieldsTo:(OrgJfugueTheoryNote *)other {
  [super copyAllFieldsTo:other];
  other->value_ = value_;
  other->duration_ = duration_;
  other->wasDurationExplicitlySet_ = wasDurationExplicitlySet_;
  other->attackVelocity_ = attackVelocity_;
  other->decayVelocity_ = decayVelocity_;
  other->isRest__ = isRest__;
  other->isStartOfTie__ = isStartOfTie__;
  other->isEndOfTie__ = isEndOfTie__;
  other->isFirstNote__ = isFirstNote__;
  other->isMelodicNote__ = isMelodicNote__;
  other->isHarmonicNote__ = isHarmonicNote__;
  other->isPercussionNote__ = isPercussionNote__;
  other->originalString_ = originalString_;
}

+ (void)initialize {
  if (self == [OrgJfugueTheoryNote class]) {
    OrgJfugueTheoryNote_NOTE_NAMES_ = [IOSObjectArray newArrayWithObjects:(id[]){ @"C", @"C#", @"D", @"Eb", @"E", @"F", @"F#", @"G", @"G#", @"A", @"Bb", @"B" } count:12 type:[IOSClass classWithClass:[NSString class]]];
    OrgJfugueTheoryNote_PERCUSSION_NAMES_ = [IOSObjectArray newArrayWithObjects:(id[]){ @"ACOUSTIC_BASS_DRUM", @"BASS_DRUM", @"SIDE_STICK", @"ACOUSTIC_SNARE", @"HAND_CLAP", @"ELECTRIC_SNARE", @"LO_FLOOR_TOM", @"CLOSED_HI_HAT", @"HIGH_FLOOR_TOM", @"PEDAL_HI_HAT", @"LO_TOM", @"OPEN_HI_HAT", @"LO_MID_TOM", @"HI_MID_TOM", @"CRASH_CYMBAL_1", @"HI_TOM", @"RIDE_CYMBAL_1", @"CHINESE_CYMBAL", @"RIDE_BELL", @"TAMBOURINE", @"SPLASH_CYMBAL", @"COWBELL", @"CRASH_CYMBAL_2", @"VIBRASLAP", @"RIDE_CYMBAL_2", @"HI_BONGO", @"LO_BONGO", @"MUTE_HI_CONGA", @"OPEN_HI_CONGA", @"LO_CONGA", @"HI_TIMBALE", @"LO_TIMBALE", @"HI_AGOGO", @"LO_AGOGO", @"CABASA", @"MARACAS", @"SHORT_WHISTLE", @"LONG_WHISTLE", @"SHORT_GUIRO", @"LONG_GUIRO", @"CLAVES", @"HI_WOOD_BLOCK", @"LO_WOOD_BLOCK", @"MUTE_CUICA", @"OPEN_CUICA", @"MUTE_TRIANGLE", @"OPEN_TRIANGLE" } count:47 type:[IOSClass classWithClass:[NSString class]]];
    OrgJfugueTheoryNote_REST_ = [((OrgJfugueTheoryNote *) [[OrgJfugueTheoryNote alloc] initWithInt:0]) setRestWithBoolean:YES];
    J2OBJC_SET_INITIALIZED(OrgJfugueTheoryNote)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Note", NULL, 0x1, NULL },
    { "initWithNSString:", "Note", NULL, 0x1, NULL },
    { "initWithOrgJfugueTheoryNote:", "Note", NULL, 0x1, NULL },
    { "initWithInt:", "Note", NULL, 0x1, NULL },
    { "initWithByte:", "Note", NULL, 0x1, NULL },
    { "initWithInt:withDouble:", "Note", NULL, 0x1, NULL },
    { "initWithByte:withDouble:", "Note", NULL, 0x1, NULL },
    { "setValueWithByte:", "setValue", "Lorg.jfugue.theory.Note;", 0x1, NULL },
    { "getValue", NULL, "B", 0x1, NULL },
    { "changeValueWithByte:", "changeValue", "Lorg.jfugue.theory.Note;", 0x1, NULL },
    { "getOctave", NULL, "B", 0x1, NULL },
    { "getDuration", NULL, "D", 0x1, NULL },
    { "setDurationWithDouble:", "setDuration", "Lorg.jfugue.theory.Note;", 0x1, NULL },
    { "useDefaultDuration", NULL, "Lorg.jfugue.theory.Note;", 0x1, NULL },
    { "useSameDurationAsWithOrgJfugueTheoryNote:", "useSameDurationAs", "Lorg.jfugue.theory.Note;", 0x1, NULL },
    { "setDurationWithNSString:", "setDuration", "Lorg.jfugue.theory.Note;", 0x1, NULL },
    { "isDurationExplicitlySet", NULL, "Z", 0x1, NULL },
    { "setImplicitDurationForTestingOnlyWithDouble:", "setImplicitDurationForTestingOnly", "Lorg.jfugue.theory.Note;", 0x1, NULL },
    { "setRestWithBoolean:", "setRest", "Lorg.jfugue.theory.Note;", 0x1, NULL },
    { "isRest", NULL, "Z", 0x1, NULL },
    { "setPercussionNoteWithBoolean:", "setPercussionNote", "Lorg.jfugue.theory.Note;", 0x1, NULL },
    { "isPercussionNote", NULL, "Z", 0x1, NULL },
    { "setAttackVelocityWithByte:", "setAttackVelocity", "Lorg.jfugue.theory.Note;", 0x1, NULL },
    { "getAttackVelocity", NULL, "B", 0x1, NULL },
    { "setDecayVelocityWithByte:", "setDecayVelocity", "Lorg.jfugue.theory.Note;", 0x1, NULL },
    { "getDecayVelocity", NULL, "B", 0x1, NULL },
    { "setStartOfTieWithBoolean:", "setStartOfTie", "Lorg.jfugue.theory.Note;", 0x1, NULL },
    { "setEndOfTieWithBoolean:", "setEndOfTie", "Lorg.jfugue.theory.Note;", 0x1, NULL },
    { "isStartOfTie", NULL, "Z", 0x1, NULL },
    { "isEndOfTie", NULL, "Z", 0x1, NULL },
    { "setFirstNoteWithBoolean:", "setFirstNote", "Lorg.jfugue.theory.Note;", 0x1, NULL },
    { "isFirstNote", NULL, "Z", 0x1, NULL },
    { "setMelodicNoteWithBoolean:", "setMelodicNote", "Lorg.jfugue.theory.Note;", 0x1, NULL },
    { "isMelodicNote", NULL, "Z", 0x1, NULL },
    { "setHarmonicNoteWithBoolean:", "setHarmonicNote", "Lorg.jfugue.theory.Note;", 0x1, NULL },
    { "isHarmonicNote", NULL, "Z", 0x1, NULL },
    { "setOriginalStringWithNSString:", "setOriginalString", "Lorg.jfugue.theory.Note;", 0x1, NULL },
    { "getOriginalString", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getMicrosecondDurationWithDouble:", "getMicrosecondDuration", "D", 0x1, NULL },
    { "getPositionInOctave", NULL, "B", 0x1, NULL },
    { "createRestWithDouble:", "createRest", "Lorg.jfugue.theory.Note;", 0x9, NULL },
    { "getToneStringWithByte:", "getToneString", "Ljava.lang.String;", 0x9, NULL },
    { "getPercussionStringWithByte:", "getPercussionString", "Ljava.lang.String;", 0x9, NULL },
    { "getFrequencyForNoteWithNSString:", "getFrequencyForNote", "D", 0x9, NULL },
    { "getFrequencyForNoteWithInt:", "getFrequencyForNote", "D", 0x9, NULL },
    { "truncateTo3DecimalPlacesWithDouble:", "truncateTo3DecimalPlaces", "D", 0xa, NULL },
    { "getPreciseFrequencyForNoteWithInt:", "getPreciseFrequencyForNote", "D", 0xa, NULL },
    { "getFrequencyAboveBaseWithDouble:withDouble:", "getFrequencyAboveBase", "D", 0xa, NULL },
    { "getDurationStringWithDouble:", "getDurationString", "Ljava.lang.String;", 0x9, NULL },
    { "getDurationStringForBeatWithInt:", "getDurationStringForBeat", "Ljava.lang.String;", 0x9, NULL },
    { "getAttackDecayString", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getPattern", NULL, "Lorg.jfugue.pattern.Pattern;", 0x1, NULL },
    { "getPercussionPattern", NULL, "Lorg.jfugue.pattern.Pattern;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "toStringWithoutDuration", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getDecoratorString", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "toDebugString", NULL, "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "value_", NULL, 0x2, "B", NULL,  },
    { "duration_", NULL, 0x2, "D", NULL,  },
    { "wasDurationExplicitlySet_", NULL, 0x2, "Z", NULL,  },
    { "attackVelocity_", NULL, 0x2, "B", NULL,  },
    { "decayVelocity_", NULL, 0x2, "B", NULL,  },
    { "isRest__", "isRest", 0x2, "Z", NULL,  },
    { "isStartOfTie__", "isStartOfTie", 0x2, "Z", NULL,  },
    { "isEndOfTie__", "isEndOfTie", 0x2, "Z", NULL,  },
    { "isFirstNote__", "isFirstNote", 0x2, "Z", NULL,  },
    { "isMelodicNote__", "isMelodicNote", 0x2, "Z", NULL,  },
    { "isHarmonicNote__", "isHarmonicNote", 0x2, "Z", NULL,  },
    { "isPercussionNote__", "isPercussionNote", 0x2, "Z", NULL,  },
    { "originalString_", NULL, 0x1, "Ljava.lang.String;", NULL,  },
    { "NOTE_NAMES_", NULL, 0x9, "[Ljava.lang.String;", &OrgJfugueTheoryNote_NOTE_NAMES_,  },
    { "PERCUSSION_NAMES_", NULL, 0x9, "[Ljava.lang.String;", &OrgJfugueTheoryNote_PERCUSSION_NAMES_,  },
    { "REST_", NULL, 0x19, "Lorg.jfugue.theory.Note;", &OrgJfugueTheoryNote_REST_,  },
    { "OCTAVE_", NULL, 0x19, "B", NULL, .constantValue.asChar = OrgJfugueTheoryNote_OCTAVE },
    { "MIN_OCTAVE_", NULL, 0x19, "B", NULL, .constantValue.asChar = OrgJfugueTheoryNote_MIN_OCTAVE },
    { "MAX_OCTAVE_", NULL, 0x19, "B", NULL, .constantValue.asChar = OrgJfugueTheoryNote_MAX_OCTAVE },
  };
  static const J2ObjcClassInfo _OrgJfugueTheoryNote = { "Note", "org.jfugue.theory", NULL, 0x1, 58, methods, 19, fields, 0, NULL};
  return &_OrgJfugueTheoryNote;
}

@end

OrgJfugueTheoryNote *OrgJfugueTheoryNote_createRestWithDouble_(jdouble duration) {
  OrgJfugueTheoryNote_init();
  return [((OrgJfugueTheoryNote *) nil_chk([((OrgJfugueTheoryNote *) [[OrgJfugueTheoryNote alloc] init]) setRestWithBoolean:YES])) setDurationWithDouble:duration];
}

NSString *OrgJfugueTheoryNote_getToneStringWithByte_(jbyte noteValue) {
  OrgJfugueTheoryNote_init();
  jint note = noteValue % 12;
  jint octave = (noteValue / 12);
  JavaLangStringBuilder *buddy = [[JavaLangStringBuilder alloc] init];
  (void) [buddy appendWithNSString:IOSObjectArray_Get(nil_chk(OrgJfugueTheoryNote_NOTE_NAMES_), note)];
  (void) [buddy appendWithInt:octave];
  return [buddy description];
}

NSString *OrgJfugueTheoryNote_getPercussionStringWithByte_(jbyte noteValue) {
  OrgJfugueTheoryNote_init();
  JavaLangStringBuilder *buddy = [[JavaLangStringBuilder alloc] init];
  (void) [buddy appendWithNSString:@"["];
  (void) [buddy appendWithNSString:IOSObjectArray_Get(nil_chk(OrgJfugueTheoryNote_PERCUSSION_NAMES_), noteValue - 35)];
  (void) [buddy appendWithNSString:@"]"];
  return [buddy description];
}

jdouble OrgJfugueTheoryNote_getFrequencyForNoteWithNSString_(NSString *note) {
  OrgJfugueTheoryNote_init();
  return OrgJfugueTheoryNote_getFrequencyForNoteWithInt_([((OrgJfugueTheoryNote *) nil_chk([((id<OrgJfugueProviderNoteProvider>) nil_chk(OrgJfugueProviderNoteProviderFactory_getNoteProvider())) createNoteWithNSString:note])) getValue]);
}

jdouble OrgJfugueTheoryNote_getFrequencyForNoteWithInt_(jint noteValue) {
  OrgJfugueTheoryNote_init();
  return OrgJfugueTheoryNote_truncateTo3DecimalPlacesWithDouble_(OrgJfugueTheoryNote_getPreciseFrequencyForNoteWithInt_(noteValue));
}

jdouble OrgJfugueTheoryNote_truncateTo3DecimalPlacesWithDouble_(jdouble preciseNumber) {
  OrgJfugueTheoryNote_init();
  return JavaLangMath_rintWithDouble_(preciseNumber * 10000.0) / 10000.0;
}

jdouble OrgJfugueTheoryNote_getPreciseFrequencyForNoteWithInt_(jint noteValue) {
  OrgJfugueTheoryNote_init();
  return OrgJfugueTheoryNote_getFrequencyAboveBaseWithDouble_withDouble_(8.1757989156, noteValue / 12.0);
}

jdouble OrgJfugueTheoryNote_getFrequencyAboveBaseWithDouble_withDouble_(jdouble baseFrequency, jdouble octavesAboveBase) {
  OrgJfugueTheoryNote_init();
  return baseFrequency * JavaLangMath_powWithDouble_withDouble_(2.0, octavesAboveBase);
}

NSString *OrgJfugueTheoryNote_getDurationStringWithDouble_(jdouble decimalDuration) {
  OrgJfugueTheoryNote_init();
  jdouble originalDecimalDuration = decimalDuration;
  JavaLangStringBuilder *buddy = [[JavaLangStringBuilder alloc] init];
  if (decimalDuration >= 1.0) {
    jint numWholeDurations = J2ObjCFpToInt(JavaLangMath_floorWithDouble_(decimalDuration));
    (void) [buddy appendWithNSString:@"w"];
    if (numWholeDurations > 1) {
      (void) [buddy appendWithInt:numWholeDurations];
    }
    decimalDuration -= numWholeDurations;
  }
  if (decimalDuration == 0.75) (void) [buddy appendWithNSString:@"h."];
  else if (decimalDuration == 0.5) (void) [buddy appendWithNSString:@"h"];
  else if (decimalDuration == 0.375) (void) [buddy appendWithNSString:@"q."];
  else if (decimalDuration == 0.25) (void) [buddy appendWithNSString:@"q"];
  else if (decimalDuration == 0.1875) (void) [buddy appendWithNSString:@"i."];
  else if (decimalDuration == 0.125) (void) [buddy appendWithNSString:@"i"];
  else if (decimalDuration == 0.09375) (void) [buddy appendWithNSString:@"s."];
  else if (decimalDuration == 0.0625) (void) [buddy appendWithNSString:@"s"];
  else if (decimalDuration == 0.046875) (void) [buddy appendWithNSString:@"t."];
  else if (decimalDuration == 0.03125) (void) [buddy appendWithNSString:@"t"];
  else if (decimalDuration == 0.0234375) (void) [buddy appendWithNSString:@"x."];
  else if (decimalDuration == 0.015625) (void) [buddy appendWithNSString:@"x"];
  else if (decimalDuration == 0.01171875) (void) [buddy appendWithNSString:@"o."];
  else if (decimalDuration == 0.0078125) (void) [buddy appendWithNSString:@"o"];
  else if (decimalDuration == 0.0) {
  }
  else {
    return JreStrcat("CD", '/', originalDecimalDuration);
  }
  return [buddy description];
}

NSString *OrgJfugueTheoryNote_getDurationStringForBeatWithInt_(jint beat) {
  OrgJfugueTheoryNote_init();
  switch (beat) {
    case 2:
    return @"h";
    case 4:
    return @"q";
    case 8:
    return @"i";
    case 16:
    return @"s";
    default:
    return JreStrcat("CD", '/', (1.0 / (jdouble) beat));
  }
}
