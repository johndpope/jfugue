//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: org/jfugue/mitools/Rearranger.java
//

#include "IOSObjectArray.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/jfugue/mitools/Rearranger.h"

@implementation OrgJfugueMitoolsRearranger

+ (NSString *)rotateWithNSString:(NSString *)elementsSeparatedBySpaces {
  return OrgJfugueMitoolsRearranger_rotateWithNSString_(elementsSeparatedBySpaces);
}

+ (NSString *)rotateWithNSString:(NSString *)elementsSeparatedBySpaces
                         withInt:(jint)numRotations {
  return OrgJfugueMitoolsRearranger_rotateWithNSString_withInt_(elementsSeparatedBySpaces, numRotations);
}

+ (NSString *)randomizeWithNSString:(NSString *)elementsSeparatedBySpaces {
  return OrgJfugueMitoolsRearranger_randomizeWithNSString_(elementsSeparatedBySpaces);
}

+ (NSString *)createStringFromElementsWithNSString:(NSString *)elementsSeparatedBySpaces
                                           withInt:(jint)numElementsInResult {
  return OrgJfugueMitoolsRearranger_createStringFromElementsWithNSString_withInt_(elementsSeparatedBySpaces, numElementsInResult);
}

+ (NSString *)appendToElementsWithNSString:(NSString *)elementsSeparatedBySpaces
                              withNSString:(NSString *)stringToAppend {
  return OrgJfugueMitoolsRearranger_appendToElementsWithNSString_withNSString_(elementsSeparatedBySpaces, stringToAppend);
}

+ (NSString *)createUniqueElementsWithNSString:(NSString *)elementsSeparatedBySpaces {
  return OrgJfugueMitoolsRearranger_createUniqueElementsWithNSString_(elementsSeparatedBySpaces);
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "rotateWithNSString:", "rotate", "Ljava.lang.String;", 0x9, NULL },
    { "rotateWithNSString:withInt:", "rotate", "Ljava.lang.String;", 0x9, NULL },
    { "randomizeWithNSString:", "randomize", "Ljava.lang.String;", 0x9, NULL },
    { "createStringFromElementsWithNSString:withInt:", "createStringFromElements", "Ljava.lang.String;", 0x9, NULL },
    { "appendToElementsWithNSString:withNSString:", "appendToElements", "Ljava.lang.String;", 0x9, NULL },
    { "createUniqueElementsWithNSString:", "createUniqueElements", "Ljava.lang.String;", 0x9, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcClassInfo _OrgJfugueMitoolsRearranger = { "Rearranger", "org.jfugue.mitools", NULL, 0x1, 7, methods, 0, NULL, 0, NULL};
  return &_OrgJfugueMitoolsRearranger;
}

@end

NSString *OrgJfugueMitoolsRearranger_rotateWithNSString_(NSString *elementsSeparatedBySpaces) {
  OrgJfugueMitoolsRearranger_init();
  return OrgJfugueMitoolsRearranger_rotateWithNSString_withInt_(elementsSeparatedBySpaces, 1);
}

NSString *OrgJfugueMitoolsRearranger_rotateWithNSString_withInt_(NSString *elementsSeparatedBySpaces, jint numRotations) {
  OrgJfugueMitoolsRearranger_init();
  IOSObjectArray *strings = [((NSString *) nil_chk(elementsSeparatedBySpaces)) split:@" "];
  JavaLangStringBuilder *buddy = [[JavaLangStringBuilder alloc] init];
  for (jint i = numRotations; i < ((IOSObjectArray *) nil_chk(strings))->size_ + numRotations; i++) {
    (void) [buddy appendWithNSString:IOSObjectArray_Get(strings, i % strings->size_)];
    (void) [buddy appendWithNSString:@" "];
  }
  return [((NSString *) nil_chk([buddy description])) trim];
}

NSString *OrgJfugueMitoolsRearranger_randomizeWithNSString_(NSString *elementsSeparatedBySpaces) {
  OrgJfugueMitoolsRearranger_init();
  IOSObjectArray *strings = [((NSString *) nil_chk(elementsSeparatedBySpaces)) split:@" "];
  id<JavaUtilList> ss = [[JavaUtilArrayList alloc] init];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(strings))->size_; i++) {
    [ss addWithId:IOSObjectArray_Get(strings, i)];
  }
  JavaLangStringBuilder *buddy = [[JavaLangStringBuilder alloc] init];
  for (jint i = 0; i < strings->size_; i++) {
    jint r = J2ObjCFpToInt((JavaLangMath_random() * [ss size]));
    (void) [buddy appendWithNSString:[ss getWithInt:r]];
    (void) [buddy appendWithNSString:@" "];
    (void) [ss removeWithInt:r];
  }
  return [((NSString *) nil_chk([buddy description])) trim];
}

NSString *OrgJfugueMitoolsRearranger_createStringFromElementsWithNSString_withInt_(NSString *elementsSeparatedBySpaces, jint numElementsInResult) {
  OrgJfugueMitoolsRearranger_init();
  IOSObjectArray *strings = [((NSString *) nil_chk(elementsSeparatedBySpaces)) split:@" "];
  JavaLangStringBuilder *buddy = [[JavaLangStringBuilder alloc] init];
  for (jint i = 0; i < numElementsInResult; i++) {
    (void) [buddy appendWithNSString:IOSObjectArray_Get(strings, J2ObjCFpToInt((JavaLangMath_random() * ((IOSObjectArray *) nil_chk(strings))->size_)))];
    (void) [buddy appendWithNSString:@" "];
  }
  return [((NSString *) nil_chk([buddy description])) trim];
}

NSString *OrgJfugueMitoolsRearranger_appendToElementsWithNSString_withNSString_(NSString *elementsSeparatedBySpaces, NSString *stringToAppend) {
  OrgJfugueMitoolsRearranger_init();
  IOSObjectArray *strings = [((NSString *) nil_chk(elementsSeparatedBySpaces)) split:@" "];
  JavaLangStringBuilder *buddy = [[JavaLangStringBuilder alloc] init];
  {
    IOSObjectArray *a__ = strings;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *s = *b__++;
      (void) [buddy appendWithNSString:s];
      (void) [buddy appendWithNSString:stringToAppend];
      (void) [buddy appendWithNSString:@" "];
    }
  }
  return [((NSString *) nil_chk([buddy description])) trim];
}

NSString *OrgJfugueMitoolsRearranger_createUniqueElementsWithNSString_(NSString *elementsSeparatedBySpaces) {
  OrgJfugueMitoolsRearranger_init();
  IOSObjectArray *strings = [((NSString *) nil_chk(elementsSeparatedBySpaces)) split:@" "];
  id<JavaUtilList> elementList = [[JavaUtilArrayList alloc] init];
  JavaLangStringBuilder *buddy = [[JavaLangStringBuilder alloc] init];
  {
    IOSObjectArray *a__ = strings;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *s = *b__++;
      if (![elementList containsWithId:s]) {
        (void) [buddy appendWithNSString:s];
        (void) [buddy appendWithNSString:@" "];
        [elementList addWithId:s];
      }
    }
  }
  return [((NSString *) nil_chk([buddy description])) trim];
}
