//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: org/jfugue/temporal/TemporalPLP.java
//

#include "IOSPrimitiveArray.h"
#include "java/lang/Exception.h"
#include "java/lang/Long.h"
#include "java/lang/Thread.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/jfugue/parser/Parser.h"
#include "org/jfugue/temporal/TemporalEvent.h"
#include "org/jfugue/temporal/TemporalEventManager.h"
#include "org/jfugue/temporal/TemporalEvents.h"
#include "org/jfugue/temporal/TemporalPLP.h"
#include "org/jfugue/theory/Chord.h"
#include "org/jfugue/theory/Note.h"

__attribute__((unused)) static void OrgJfugueTemporalTemporalPLP_delayWithLong_(OrgJfugueTemporalTemporalPLP *self, jlong millis);

@implementation OrgJfugueTemporalTemporalPLP

- (instancetype)init {
  if (self = [super init]) {
    self->events_ = [[OrgJfugueTemporalTemporalEvents alloc] init];
    self->eventManager_ = [[OrgJfugueTemporalTemporalEventManager alloc] init];
  }
  return self;
}

- (id<JavaUtilMap>)getTimeToEventMap {
  return [((OrgJfugueTemporalTemporalEventManager *) nil_chk(eventManager_)) getTimeToEventMap];
}

- (void)beforeParsingStarts {
  [((OrgJfugueTemporalTemporalEventManager *) nil_chk(self->eventManager_)) reset];
}

- (void)afterParsingFinished {
  [((OrgJfugueTemporalTemporalEventManager *) nil_chk(self->eventManager_)) finish];
}

- (void)onTrackChangedWithByte:(jbyte)track {
  [((OrgJfugueTemporalTemporalEventManager *) nil_chk(self->eventManager_)) setCurrentTrackWithByte:track];
  [self->eventManager_ addRealTimeEventWithOrgJfugueTemporalTemporalEvent:[[OrgJfugueTemporalTemporalEvents_TrackEvent alloc] initWithOrgJfugueTemporalTemporalEvents:events_ withByte:track]];
}

- (void)onLayerChangedWithByte:(jbyte)layer {
  [((OrgJfugueTemporalTemporalEventManager *) nil_chk(self->eventManager_)) setCurrentLayerWithByte:layer];
  [self->eventManager_ addRealTimeEventWithOrgJfugueTemporalTemporalEvent:[[OrgJfugueTemporalTemporalEvents_LayerEvent alloc] initWithOrgJfugueTemporalTemporalEvents:events_ withByte:layer]];
}

- (void)onInstrumentParsedWithByte:(jbyte)instrument {
  [((OrgJfugueTemporalTemporalEventManager *) nil_chk(self->eventManager_)) addRealTimeEventWithOrgJfugueTemporalTemporalEvent:[[OrgJfugueTemporalTemporalEvents_InstrumentEvent alloc] initWithOrgJfugueTemporalTemporalEvents:events_ withByte:instrument]];
}

- (void)onTempoChangedWithInt:(jint)tempoBPM {
  [((OrgJfugueTemporalTemporalEventManager *) nil_chk(self->eventManager_)) setTempoWithInt:tempoBPM];
  [self->eventManager_ addRealTimeEventWithOrgJfugueTemporalTemporalEvent:[[OrgJfugueTemporalTemporalEvents_TempoEvent alloc] initWithOrgJfugueTemporalTemporalEvents:events_ withInt:tempoBPM]];
}

- (void)onKeySignatureParsedWithByte:(jbyte)key
                            withByte:(jbyte)scale_ {
  [((OrgJfugueTemporalTemporalEventManager *) nil_chk(self->eventManager_)) addRealTimeEventWithOrgJfugueTemporalTemporalEvent:[[OrgJfugueTemporalTemporalEvents_KeySignatureEvent alloc] initWithOrgJfugueTemporalTemporalEvents:events_ withByte:key withByte:scale_]];
}

- (void)onTimeSignatureParsedWithByte:(jbyte)numerator
                             withByte:(jbyte)denominator {
  [((OrgJfugueTemporalTemporalEventManager *) nil_chk(self->eventManager_)) addRealTimeEventWithOrgJfugueTemporalTemporalEvent:[[OrgJfugueTemporalTemporalEvents_TimeSignatureEvent alloc] initWithOrgJfugueTemporalTemporalEvents:events_ withByte:numerator withByte:denominator]];
}

- (void)onBarLineParsedWithLong:(jlong)time {
  [((OrgJfugueTemporalTemporalEventManager *) nil_chk(self->eventManager_)) addRealTimeEventWithOrgJfugueTemporalTemporalEvent:[[OrgJfugueTemporalTemporalEvents_BarEvent alloc] initWithOrgJfugueTemporalTemporalEvents:events_ withLong:time]];
}

- (void)onTrackBeatTimeBookmarkedWithNSString:(NSString *)timeBookmarkID {
  [((OrgJfugueTemporalTemporalEventManager *) nil_chk(self->eventManager_)) addTrackTickTimeBookmarkWithNSString:timeBookmarkID];
}

- (void)onTrackBeatTimeBookmarkRequestedWithNSString:(NSString *)timeBookmarkID {
  jdouble time = [((OrgJfugueTemporalTemporalEventManager *) nil_chk(self->eventManager_)) getTrackBeatTimeBookmarkWithNSString:timeBookmarkID];
  [self->eventManager_ setTrackBeatTimeWithDouble:time];
}

- (void)onTrackBeatTimeRequestedWithDouble:(jdouble)time {
  [((OrgJfugueTemporalTemporalEventManager *) nil_chk(self->eventManager_)) setTrackBeatTimeWithDouble:time];
}

- (void)onPitchWheelParsedWithByte:(jbyte)lsb
                          withByte:(jbyte)msb {
  [((OrgJfugueTemporalTemporalEventManager *) nil_chk(self->eventManager_)) addRealTimeEventWithOrgJfugueTemporalTemporalEvent:[[OrgJfugueTemporalTemporalEvents_PitchWheelEvent alloc] initWithOrgJfugueTemporalTemporalEvents:events_ withByte:lsb withByte:msb]];
}

- (void)onChannelPressureParsedWithByte:(jbyte)pressure {
  [((OrgJfugueTemporalTemporalEventManager *) nil_chk(self->eventManager_)) addRealTimeEventWithOrgJfugueTemporalTemporalEvent:[[OrgJfugueTemporalTemporalEvents_ChannelPressureEvent alloc] initWithOrgJfugueTemporalTemporalEvents:events_ withByte:pressure]];
}

- (void)onPolyphonicPressureParsedWithByte:(jbyte)key
                                  withByte:(jbyte)pressure {
  [((OrgJfugueTemporalTemporalEventManager *) nil_chk(self->eventManager_)) addRealTimeEventWithOrgJfugueTemporalTemporalEvent:[[OrgJfugueTemporalTemporalEvents_PolyphonicPressureEvent alloc] initWithOrgJfugueTemporalTemporalEvents:events_ withByte:key withByte:pressure]];
}

- (void)onSystemExclusiveParsedWithByteArray:(IOSByteArray *)bytes {
  [((OrgJfugueTemporalTemporalEventManager *) nil_chk(self->eventManager_)) addRealTimeEventWithOrgJfugueTemporalTemporalEvent:[[OrgJfugueTemporalTemporalEvents_SystemExclusiveEvent alloc] initWithOrgJfugueTemporalTemporalEvents:events_ withByteArray:bytes]];
}

- (void)onControllerEventParsedWithByte:(jbyte)controller
                               withByte:(jbyte)value {
  [((OrgJfugueTemporalTemporalEventManager *) nil_chk(self->eventManager_)) addRealTimeEventWithOrgJfugueTemporalTemporalEvent:[[OrgJfugueTemporalTemporalEvents_ControllerEvent alloc] initWithOrgJfugueTemporalTemporalEvents:events_ withByte:controller withByte:value]];
}

- (void)onLyricParsedWithNSString:(NSString *)lyric {
  [((OrgJfugueTemporalTemporalEventManager *) nil_chk(self->eventManager_)) addRealTimeEventWithOrgJfugueTemporalTemporalEvent:[[OrgJfugueTemporalTemporalEvents_LyricEvent alloc] initWithOrgJfugueTemporalTemporalEvents:events_ withNSString:lyric]];
}

- (void)onMarkerParsedWithNSString:(NSString *)marker {
  [((OrgJfugueTemporalTemporalEventManager *) nil_chk(self->eventManager_)) addRealTimeEventWithOrgJfugueTemporalTemporalEvent:[[OrgJfugueTemporalTemporalEvents_MarkerEvent alloc] initWithOrgJfugueTemporalTemporalEvents:events_ withNSString:marker]];
}

- (void)onFunctionParsedWithNSString:(NSString *)id_
                              withId:(id)message {
  [((OrgJfugueTemporalTemporalEventManager *) nil_chk(self->eventManager_)) addRealTimeEventWithOrgJfugueTemporalTemporalEvent:[[OrgJfugueTemporalTemporalEvents_UserEvent alloc] initWithOrgJfugueTemporalTemporalEvents:events_ withNSString:id_ withId:message]];
}

- (void)onNoteParsedWithOrgJfugueTheoryNote:(OrgJfugueTheoryNote *)note {
  [((OrgJfugueTemporalTemporalEventManager *) nil_chk(self->eventManager_)) addRealTimeEventWithOrgJfugueTemporalDurationTemporalEvent:[[OrgJfugueTemporalTemporalEvents_NoteEvent alloc] initWithOrgJfugueTemporalTemporalEvents:events_ withOrgJfugueTheoryNote:note]];
}

- (void)onChordParsedWithOrgJfugueTheoryChord:(OrgJfugueTheoryChord *)chord {
  [((OrgJfugueTemporalTemporalEventManager *) nil_chk(self->eventManager_)) addRealTimeEventWithOrgJfugueTemporalDurationTemporalEvent:[[OrgJfugueTemporalTemporalEvents_ChordEvent alloc] initWithOrgJfugueTemporalTemporalEvents:events_ withOrgJfugueTheoryChord:chord]];
}

- (void)delayWithLong:(jlong)millis {
  OrgJfugueTemporalTemporalPLP_delayWithLong_(self, millis);
}

- (void)parse {
  [self fireBeforeParsingStarts];
  jlong oldTime = 0;
  id<JavaUtilSet> times = [((id<JavaUtilMap>) nil_chk([((OrgJfugueTemporalTemporalEventManager *) nil_chk(self->eventManager_)) getTimeToEventMap])) keySet];
  for (JavaLangLong *boxed__ in nil_chk(times)) {
    jlong time = [((JavaLangLong *) nil_chk(boxed__)) longLongValue];
    OrgJfugueTemporalTemporalPLP_delayWithLong_(self, time - oldTime);
    oldTime = time;
    for (id<OrgJfugueTemporalTemporalEvent> __strong event in nil_chk([((id<JavaUtilMap>) nil_chk([self->eventManager_ getTimeToEventMap])) getWithId:JavaLangLong_valueOfWithLong_(time)])) {
      [((id<OrgJfugueTemporalTemporalEvent>) nil_chk(event)) executeWithOrgJfugueParserParser:self];
    }
  }
  [self fireAfterParsingFinished];
}

- (void)copyAllFieldsTo:(OrgJfugueTemporalTemporalPLP *)other {
  [super copyAllFieldsTo:other];
  other->eventManager_ = eventManager_;
  other->events_ = events_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "TemporalPLP", NULL, 0x1, NULL },
    { "getTimeToEventMap", NULL, "Ljava.util.Map;", 0x1, NULL },
    { "beforeParsingStarts", NULL, "V", 0x1, NULL },
    { "afterParsingFinished", NULL, "V", 0x1, NULL },
    { "onTrackChangedWithByte:", "onTrackChanged", "V", 0x1, NULL },
    { "onLayerChangedWithByte:", "onLayerChanged", "V", 0x1, NULL },
    { "onInstrumentParsedWithByte:", "onInstrumentParsed", "V", 0x1, NULL },
    { "onTempoChangedWithInt:", "onTempoChanged", "V", 0x1, NULL },
    { "onKeySignatureParsedWithByte:withByte:", "onKeySignatureParsed", "V", 0x1, NULL },
    { "onTimeSignatureParsedWithByte:withByte:", "onTimeSignatureParsed", "V", 0x1, NULL },
    { "onBarLineParsedWithLong:", "onBarLineParsed", "V", 0x1, NULL },
    { "onTrackBeatTimeBookmarkedWithNSString:", "onTrackBeatTimeBookmarked", "V", 0x1, NULL },
    { "onTrackBeatTimeBookmarkRequestedWithNSString:", "onTrackBeatTimeBookmarkRequested", "V", 0x1, NULL },
    { "onTrackBeatTimeRequestedWithDouble:", "onTrackBeatTimeRequested", "V", 0x1, NULL },
    { "onPitchWheelParsedWithByte:withByte:", "onPitchWheelParsed", "V", 0x1, NULL },
    { "onChannelPressureParsedWithByte:", "onChannelPressureParsed", "V", 0x1, NULL },
    { "onPolyphonicPressureParsedWithByte:withByte:", "onPolyphonicPressureParsed", "V", 0x1, NULL },
    { "onSystemExclusiveParsedWithByteArray:", "onSystemExclusiveParsed", "V", 0x81, NULL },
    { "onControllerEventParsedWithByte:withByte:", "onControllerEventParsed", "V", 0x1, NULL },
    { "onLyricParsedWithNSString:", "onLyricParsed", "V", 0x1, NULL },
    { "onMarkerParsedWithNSString:", "onMarkerParsed", "V", 0x1, NULL },
    { "onFunctionParsedWithNSString:withId:", "onFunctionParsed", "V", 0x1, NULL },
    { "onNoteParsedWithOrgJfugueTheoryNote:", "onNoteParsed", "V", 0x1, NULL },
    { "onChordParsedWithOrgJfugueTheoryChord:", "onChordParsed", "V", 0x1, NULL },
    { "delayWithLong:", "delay", "V", 0x2, NULL },
    { "parse", NULL, "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "eventManager_", NULL, 0x2, "Lorg.jfugue.temporal.TemporalEventManager;", NULL,  },
    { "events_", NULL, 0x2, "Lorg.jfugue.temporal.TemporalEvents;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJfugueTemporalTemporalPLP = { "TemporalPLP", "org.jfugue.temporal", NULL, 0x1, 26, methods, 2, fields, 0, NULL};
  return &_OrgJfugueTemporalTemporalPLP;
}

@end

void OrgJfugueTemporalTemporalPLP_delayWithLong_(OrgJfugueTemporalTemporalPLP *self, jlong millis) {
  @try {
    JavaLangThread_sleepWithLong_(millis);
  }
  @catch (JavaLangException *e) {
  }
}
