//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: org/jfugue/integration/LilyPondParserListener.java
//

#include "IOSObjectArray.h"
#include "java/io/PrintStream.h"
#include "java/lang/Byte.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/util/Map.h"
#include "java/util/StringTokenizer.h"
#include "org/jfugue/integration/LilyPondParserListener.h"
#include "org/jfugue/midi/MidiDictionary.h"
#include "org/jfugue/pattern/Pattern.h"
#include "org/jfugue/theory/Chord.h"
#include "org/jfugue/theory/Intervals.h"
#include "org/jfugue/theory/Note.h"

__attribute__((unused)) static void OrgJfugueIntegrationLilyPondParserListener_logWithNSString_(OrgJfugueIntegrationLilyPondParserListener *self, NSString *message);
__attribute__((unused)) static void OrgJfugueIntegrationLilyPondParserListener_printChordWithOrgJfugueTheoryChord_(OrgJfugueIntegrationLilyPondParserListener *self, OrgJfugueTheoryChord *chord);
__attribute__((unused)) static void OrgJfugueIntegrationLilyPondParserListener_printNoteWithOrgJfugueTheoryNote_(OrgJfugueIntegrationLilyPondParserListener *self, OrgJfugueTheoryNote *note);
__attribute__((unused)) static void OrgJfugueIntegrationLilyPondParserListener_parallelNoteEventWithNSString_withNSString_withNSString_(OrgJfugueIntegrationLilyPondParserListener *self, NSString *musicString, NSString *duration, NSString *rootNote);
__attribute__((unused)) static void OrgJfugueIntegrationLilyPondParserListener_handleLastNote(OrgJfugueIntegrationLilyPondParserListener *self);
__attribute__((unused)) static void OrgJfugueIntegrationLilyPondParserListener_saveWithBoolean_(OrgJfugueIntegrationLilyPondParserListener *self, jboolean isLastSave);
__attribute__((unused)) static jint OrgJfugueIntegrationNoteWindow_lilypondRelativeDirectionWithChar_withChar_(OrgJfugueIntegrationNoteWindow *self, jchar firstNote, jchar secondNote);
__attribute__((unused)) static jint OrgJfugueIntegrationNoteWindow_jfugueOctaveChangeWithChar_withChar_withInt_(OrgJfugueIntegrationNoteWindow *self, jchar firstNote, jchar secondNote, jint lilypondDirection);

@implementation OrgJfugueIntegrationLilyPondParserListener

- (void)logWithNSString:(NSString *)message {
  OrgJfugueIntegrationLilyPondParserListener_logWithNSString_(self, message);
}

- (void)onTrackChangedWithByte:(jbyte)track {
  OrgJfugueIntegrationLilyPondParserListener_logWithNSString_(self, JreStrcat("$B", @"Track change: ", track));
  if ([((JavaLangStringBuffer *) nil_chk(lyString_)) sequenceLength] > 1) {
    OrgJfugueIntegrationLilyPondParserListener_saveWithBoolean_(self, YES);
    OrgJfugueIntegrationLilyPondParserListener_handleLastNote(self);
    [((OrgJfugueIntegrationNoteWindow *) nil_chk(noteWindow_)) emptyAll];
    (void) [lyString_ appendWithNSString:@"}\n"];
  }
  else {
    lyString_ = [[JavaLangStringBuffer alloc] init];
  }
  closeStaff_ = YES;
  (void) [lyString_ appendWithNSString:@"\\new Staff { "];
}

- (void)onInstrumentParsedWithByte:(jbyte)instrument {
  OrgJfugueIntegrationLilyPondParserListener_logWithNSString_(self, @"Instrument change");
  NSString *id_ = JavaLangByte_toStringWithByte_(instrument);
  NSString *instrument2 = JreStrcat("$$$", @"\\set Staff.instrumentName = \"", [((id<JavaUtilMap>) nil_chk(OrgJfugueMidiMidiDictionary_get_INSTRUMENT_BYTE_TO_STRING_())) getWithId:JavaLangByte_valueOfWithByte_(JavaLangByte_parseByteWithNSString_(id_))], @"\" ");
  (void) [((JavaLangStringBuffer *) nil_chk(lyString_)) appendWithNSString:instrument2];
}

- (void)onNoteParsedWithOrgJfugueTheoryNote:(OrgJfugueTheoryNote *)note2 {
  [((OrgJfugueIntegrationNoteWindow *) nil_chk(noteWindow_)) addNoteWithOrgJfugueTheoryNote:note2];
  if ([((OrgJfugueTheoryNote *) nil_chk(note2)) isFirstNote]) {
    handleChord_ = NO;
    if (handlePolyphony_) {
      handlePolyphony_ = NO;
    }
  }
  else {
    if ([note2 isHarmonicNote]) {
      handleChord_ = YES;
      handlePolyphony_ = NO;
    }
    else {
      handleChord_ = NO;
      handlePolyphony_ = YES;
    }
  }
  if ([noteWindow_ getSecondPreviousNote] != nil) {
    OrgJfugueIntegrationLilyPondParserListener_saveWithBoolean_(self, NO);
  }
}

- (void)printChordWithOrgJfugueTheoryChord:(OrgJfugueTheoryChord *)chord {
  OrgJfugueIntegrationLilyPondParserListener_printChordWithOrgJfugueTheoryChord_(self, chord);
}

- (void)printNoteWithOrgJfugueTheoryNote:(OrgJfugueTheoryNote *)note {
  OrgJfugueIntegrationLilyPondParserListener_printNoteWithOrgJfugueTheoryNote_(self, note);
}

- (void)onChordParsedWithOrgJfugueTheoryChord:(OrgJfugueTheoryChord *)chord {
  OrgJfugueIntegrationLilyPondParserListener_printChordWithOrgJfugueTheoryChord_(self, chord);
  [((OrgJfugueIntegrationNoteWindow *) nil_chk(noteWindow_)) addChordOctaveWithOrgJfugueTheoryNote:[((OrgJfugueTheoryChord *) nil_chk(chord)) getRoot]];
  NSString *musicString = [((OrgJfuguePatternPattern *) nil_chk([chord getPatternWithNotes])) description];
  NSString *duration = OrgJfugueIntegrationLilyPondNoteDurationHelper_getDuration2WithNSString_(JavaLangDouble_toStringWithDouble_([((OrgJfugueTheoryNote *) nil_chk([chord getRoot])) getDuration]));
  OrgJfugueIntegrationLilyPondParserListener_parallelNoteEventWithNSString_withNSString_withNSString_(self, musicString, duration, ((OrgJfugueTheoryNote *) nil_chk([chord getRoot]))->originalString_);
  (void) [((JavaLangStringBuffer *) nil_chk(lyString_)) appendWithNSString:@">"];
  (void) [lyString_ appendWithNSString:duration];
  (void) [lyString_ appendWithNSString:@" "];
}

- (void)parallelNoteEventWithNSString:(NSString *)musicString
                         withNSString:(NSString *)duration
                         withNSString:(NSString *)rootNote {
  OrgJfugueIntegrationLilyPondParserListener_parallelNoteEventWithNSString_withNSString_withNSString_(self, musicString, duration, rootNote);
}

- (NSString *)getLyString {
  [((OrgJfugueIntegrationNoteWindow *) nil_chk(noteWindow_)) print];
  OrgJfugueIntegrationLilyPondParserListener_saveWithBoolean_(self, YES);
  OrgJfugueIntegrationLilyPondParserListener_handleLastNote(self);
  (void) [((JavaLangStringBuffer *) nil_chk(lyString_)) appendWithNSString:@"}"];
  return [lyString_ description];
}

- (void)handleLastNote {
  OrgJfugueIntegrationLilyPondParserListener_handleLastNote(self);
}

- (void)saveWithBoolean:(jboolean)isLastSave {
  OrgJfugueIntegrationLilyPondParserListener_saveWithBoolean_(self, isLastSave);
}

- (instancetype)init {
  if (self = [super init]) {
    closeStaff_ = NO;
    handleChord_ = NO;
    closeChord_ = NO;
    handlePolyphony_ = NO;
    closePolyphony_ = NO;
    noteWindow_ = [[OrgJfugueIntegrationNoteWindow alloc] init];
    lyString_ = [[JavaLangStringBuffer alloc] initWithNSString:@" "];
    isDebug_ = NO;
  }
  return self;
}

- (void)copyAllFieldsTo:(OrgJfugueIntegrationLilyPondParserListener *)other {
  [super copyAllFieldsTo:other];
  other->closeStaff_ = closeStaff_;
  other->handleChord_ = handleChord_;
  other->closeChord_ = closeChord_;
  other->handlePolyphony_ = handlePolyphony_;
  other->closePolyphony_ = closePolyphony_;
  other->noteWindow_ = noteWindow_;
  other->lyString_ = lyString_;
  other->isDebug_ = isDebug_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "logWithNSString:", "log", "V", 0x2, NULL },
    { "onTrackChangedWithByte:", "onTrackChanged", "V", 0x1, NULL },
    { "onInstrumentParsedWithByte:", "onInstrumentParsed", "V", 0x1, NULL },
    { "onNoteParsedWithOrgJfugueTheoryNote:", "onNoteParsed", "V", 0x1, NULL },
    { "printChordWithOrgJfugueTheoryChord:", "printChord", "V", 0x2, NULL },
    { "printNoteWithOrgJfugueTheoryNote:", "printNote", "V", 0x2, NULL },
    { "onChordParsedWithOrgJfugueTheoryChord:", "onChordParsed", "V", 0x1, NULL },
    { "parallelNoteEventWithNSString:withNSString:withNSString:", "parallelNoteEvent", "V", 0x2, NULL },
    { "getLyString", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "handleLastNote", NULL, "V", 0x2, NULL },
    { "saveWithBoolean:", "save", "V", 0x2, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "closeStaff_", NULL, 0x0, "Z", NULL,  },
    { "handleChord_", NULL, 0x0, "Z", NULL,  },
    { "closeChord_", NULL, 0x2, "Z", NULL,  },
    { "handlePolyphony_", NULL, 0x2, "Z", NULL,  },
    { "closePolyphony_", NULL, 0x2, "Z", NULL,  },
    { "noteWindow_", NULL, 0x2, "Lorg.jfugue.integration.NoteWindow;", NULL,  },
    { "lyString_", NULL, 0x2, "Ljava.lang.StringBuffer;", NULL,  },
    { "isDebug_", NULL, 0x2, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJfugueIntegrationLilyPondParserListener = { "LilyPondParserListener", "org.jfugue.integration", NULL, 0x1, 12, methods, 8, fields, 0, NULL};
  return &_OrgJfugueIntegrationLilyPondParserListener;
}

@end

void OrgJfugueIntegrationLilyPondParserListener_logWithNSString_(OrgJfugueIntegrationLilyPondParserListener *self, NSString *message) {
  if (self->isDebug_) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:message];
  }
}

void OrgJfugueIntegrationLilyPondParserListener_printChordWithOrgJfugueTheoryChord_(OrgJfugueIntegrationLilyPondParserListener *self, OrgJfugueTheoryChord *chord) {
  OrgJfugueIntegrationLilyPondParserListener_logWithNSString_(self, JreStrcat("$B$$$D$B$B", @"Chord parsed: rootnote = ", [((OrgJfugueTheoryNote *) nil_chk([((OrgJfugueTheoryChord *) nil_chk(chord)) getRoot])) getValue], @"  intervals = ", [((OrgJfugueTheoryIntervals *) nil_chk([chord getIntervals])) description], @"  duration = ", [((OrgJfugueTheoryNote *) nil_chk([chord getRoot])) getDuration], @"  attack = ", [((OrgJfugueTheoryNote *) nil_chk([chord getRoot])) getAttackVelocity], @"  decay = ", [((OrgJfugueTheoryNote *) nil_chk([chord getRoot])) getDecayVelocity]));
  OrgJfugueIntegrationLilyPondParserListener_logWithNSString_(self, [((OrgJfuguePatternPattern *) nil_chk([chord getPatternWithNotes])) description]);
  {
    IOSObjectArray *a__ = [chord getNotes];
    OrgJfugueTheoryNote * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgJfugueTheoryNote * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgJfugueTheoryNote *note = *b__++;
      OrgJfugueIntegrationLilyPondParserListener_printNoteWithOrgJfugueTheoryNote_(self, note);
    }
  }
}

void OrgJfugueIntegrationLilyPondParserListener_printNoteWithOrgJfugueTheoryNote_(OrgJfugueIntegrationLilyPondParserListener *self, OrgJfugueTheoryNote *note) {
  OrgJfugueIntegrationLilyPondParserListener_logWithNSString_(self, [((OrgJfugueTheoryNote *) nil_chk(note)) toDebugString]);
}

void OrgJfugueIntegrationLilyPondParserListener_parallelNoteEventWithNSString_withNSString_withNSString_(OrgJfugueIntegrationLilyPondParserListener *self, NSString *musicString, NSString *duration, NSString *rootNote) {
  jboolean isFirst = YES;
  (void) [((JavaLangStringBuffer *) nil_chk(self->lyString_)) appendWithNSString:@"<"];
  JavaUtilStringTokenizer *tokenizer = [[JavaUtilStringTokenizer alloc] initWithNSString:musicString withNSString:@"+"];
  while ([tokenizer hasMoreElements]) {
    NSString *note = [tokenizer nextToken];
    NSString *firstLetter = [((NSString *) nil_chk([((NSString *) nil_chk(note)) substring:0 endIndex:1])) lowercaseString];
    (void) [self->lyString_ appendWithNSString:firstLetter];
    if (isFirst) {
      jint octaveChange = [((OrgJfugueIntegrationNoteWindow *) nil_chk(self->noteWindow_)) getOctaveChangeWithChar:[((NSString *) nil_chk(firstLetter)) charAtWithInt:0]];
      if (octaveChange > 0) {
        for (jint i = 0; i < octaveChange; i++) {
          OrgJfugueIntegrationLilyPondParserListener_logWithNSString_(self, @"Add octave change");
          (void) [self->lyString_ appendWithNSString:@"'"];
        }
      }
      if (octaveChange < 0) {
        for (jint i = 0; i > octaveChange; i--) {
          OrgJfugueIntegrationLilyPondParserListener_logWithNSString_(self, @"Add octave change");
          (void) [self->lyString_ appendWithNSString:@","];
        }
      }
      isFirst = NO;
      [self->noteWindow_ setLastNoteWithChar:[firstLetter charAtWithInt:0]];
    }
    if ([tokenizer hasMoreElements]) {
      (void) [self->lyString_ appendWithNSString:@" "];
    }
  }
}

void OrgJfugueIntegrationLilyPondParserListener_handleLastNote(OrgJfugueIntegrationLilyPondParserListener *self) {
  OrgJfugueIntegrationLilyPondParserListener_logWithNSString_(self, JreStrcat("$@", @"Current note: ", [((OrgJfugueIntegrationNoteWindow *) nil_chk(self->noteWindow_)) getCurrentNote]));
  if ([((JavaLangStringBuffer *) nil_chk([self->noteWindow_ getCurrentNoteLy])) sequenceLength] > 0 && !self->closeChord_) {
    (void) [((JavaLangStringBuffer *) nil_chk(self->lyString_)) appendWithJavaLangStringBuffer:[self->noteWindow_ getCurrentNoteLy]];
  }
  if ([self->noteWindow_ getCurrentNoteDuration] != nil && !self->closeChord_) {
    (void) [((JavaLangStringBuffer *) nil_chk(self->lyString_)) appendWithNSString:[self->noteWindow_ getCurrentNoteDuration]];
  }
  if ([self->noteWindow_ getCurrentNote] != nil && !self->closeChord_) {
    (void) [((JavaLangStringBuffer *) nil_chk(self->lyString_)) appendWithNSString:@" "];
  }
  if (![((NSString *) nil_chk([((JavaLangStringBuffer *) nil_chk(self->lyString_)) description])) contains:@"new Staff"]) {
    self->closeStaff_ = YES;
    JavaLangStringBuffer *lyBuffer = [[JavaLangStringBuffer alloc] init];
    (void) [lyBuffer appendWithNSString:@"\\new Staff {"];
    (void) [lyBuffer appendWithJavaLangStringBuffer:self->lyString_];
    self->lyString_ = lyBuffer;
  }
  if (self->closeChord_) {
    self->closeChord_ = NO;
    (void) [self->lyString_ appendWithJavaLangStringBuffer:[self->noteWindow_ getCurrentNoteLy]];
    (void) [self->lyString_ appendWithNSString:@">"];
    (void) [self->lyString_ appendWithNSString:[self->noteWindow_ getCurrentNoteDuration]];
    (void) [self->lyString_ appendWithNSString:@" "];
  }
  if (self->closePolyphony_) {
    (void) [self->lyString_ appendWithNSString:@"} >> "];
  }
}

void OrgJfugueIntegrationLilyPondParserListener_saveWithBoolean_(OrgJfugueIntegrationLilyPondParserListener *self, jboolean isLastSave) {
  OrgJfugueIntegrationLilyPondParserListener_logWithNSString_(self, JreStrcat("$@$Z", @"==> Save called, lyString before: ", self->lyString_, @", last save: ", isLastSave));
  [((OrgJfugueIntegrationNoteWindow *) nil_chk(self->noteWindow_)) print];
  if (!isLastSave) {
    OrgJfugueIntegrationLilyPondParserListener_logWithNSString_(self, JreStrcat("$$", @"secondPreviousNote: ", ((OrgJfugueTheoryNote *) nil_chk([self->noteWindow_ getSecondPreviousNote]))->originalString_));
    if ([((OrgJfugueTheoryNote *) nil_chk([self->noteWindow_ getSecondPreviousNote])) isFirstNote] && [((OrgJfugueTheoryNote *) nil_chk([self->noteWindow_ getPreviousNote])) isHarmonicNote] && ![((OrgJfugueTheoryNote *) nil_chk([self->noteWindow_ getCurrentNote])) isMelodicNote]) {
      (void) [((JavaLangStringBuffer *) nil_chk(self->lyString_)) appendWithNSString:@"<"];
      (void) [self->lyString_ appendWithNSString:[self->noteWindow_ getSecondPreviousNoteLy]];
      (void) [self->lyString_ appendWithNSString:@" "];
      self->closeChord_ = YES;
    }
    else if ([((OrgJfugueTheoryNote *) nil_chk([self->noteWindow_ getSecondPreviousNote])) isFirstNote] && self->handlePolyphony_) {
      if (self->closePolyphony_) {
        self->closePolyphony_ = NO;
        (void) [((JavaLangStringBuffer *) nil_chk(self->lyString_)) appendWithNSString:@"} >>"];
      }
      (void) [((JavaLangStringBuffer *) nil_chk(self->lyString_)) appendWithNSString:@"<< { "];
      self->closePolyphony_ = YES;
      (void) [self->lyString_ appendWithNSString:[self->noteWindow_ getSecondPreviousNoteLy]];
      (void) [self->lyString_ appendWithNSString:[self->noteWindow_ getSecondPreviousNoteDuration]];
      if ([((OrgJfugueTheoryNote *) nil_chk([self->noteWindow_ getPreviousNote])) isHarmonicNote]) {
        (void) [self->lyString_ appendWithNSString:@" } \\\\ { "];
      }
    }
    else if ([((OrgJfugueTheoryNote *) nil_chk([self->noteWindow_ getSecondPreviousNote])) isHarmonicNote] && [((OrgJfugueTheoryNote *) nil_chk([self->noteWindow_ getPreviousNote])) isFirstNote]) {
      (void) [((JavaLangStringBuffer *) nil_chk(self->lyString_)) appendWithNSString:[self->noteWindow_ getSecondPreviousNoteLy]];
      (void) [self->lyString_ appendWithNSString:@">"];
      (void) [self->lyString_ appendWithNSString:[self->noteWindow_ getPreviousNoteDuration]];
      (void) [self->lyString_ appendWithNSString:@" "];
      self->closeChord_ = NO;
    }
    else {
      (void) [((JavaLangStringBuffer *) nil_chk(self->lyString_)) appendWithNSString:[self->noteWindow_ getSecondPreviousNoteLy]];
      if (![((OrgJfugueTheoryNote *) nil_chk([self->noteWindow_ getSecondPreviousNote])) isHarmonicNote]) {
        (void) [self->lyString_ appendWithNSString:[self->noteWindow_ getSecondPreviousNoteDuration]];
      }
      (void) [self->lyString_ appendWithNSString:@" "];
    }
    if ([((OrgJfugueTheoryNote *) nil_chk([self->noteWindow_ getSecondPreviousNote])) isStartOfTie]) {
      (void) [((JavaLangStringBuffer *) nil_chk(self->lyString_)) appendWithNSString:@"~ "];
    }
  }
  if (!isLastSave && [self->noteWindow_ getPreviousNote] != nil && [((OrgJfugueTheoryNote *) nil_chk([self->noteWindow_ getPreviousNote])) isFirstNote] && [((OrgJfugueTheoryNote *) nil_chk([self->noteWindow_ getCurrentNote])) isHarmonicNote]) {
    OrgJfugueIntegrationLilyPondParserListener_logWithNSString_(self, @"We don't know yet");
    return;
  }
  if ([self->noteWindow_ getSecondPreviousNote] != nil && ![((OrgJfugueTheoryNote *) nil_chk([self->noteWindow_ getCurrentNote])) isHarmonicNote] && ([self->noteWindow_ getPreviousNote] != nil || [self->noteWindow_ getCurrentNote] != nil)) {
    (void) [((JavaLangStringBuffer *) nil_chk(self->lyString_)) appendWithNSString:[self->noteWindow_ getPreviousNoteLy]];
  }
  if ([self->noteWindow_ getPreviousNote] != nil) {
    OrgJfugueIntegrationLilyPondParserListener_logWithNSString_(self, JreStrcat("$$", @"previousnote: ", ((OrgJfugueTheoryNote *) nil_chk([self->noteWindow_ getPreviousNote]))->originalString_));
    if (isLastSave && [((OrgJfugueTheoryNote *) nil_chk([self->noteWindow_ getPreviousNote])) isFirstNote] && [((OrgJfugueTheoryNote *) nil_chk([self->noteWindow_ getCurrentNote])) isHarmonicNote]) {
      (void) [((JavaLangStringBuffer *) nil_chk(self->lyString_)) appendWithNSString:@"<"];
      (void) [self->lyString_ appendWithNSString:[self->noteWindow_ getPreviousNoteLy]];
      (void) [self->lyString_ appendWithNSString:@" "];
      self->closeChord_ = YES;
    }
    if ([((OrgJfugueTheoryNote *) nil_chk([self->noteWindow_ getPreviousNote])) isHarmonicNote] && [((OrgJfugueTheoryNote *) nil_chk([self->noteWindow_ getCurrentNote])) isHarmonicNote]) {
      (void) [((JavaLangStringBuffer *) nil_chk(self->lyString_)) appendWithNSString:[self->noteWindow_ getPreviousNoteLy]];
      (void) [self->lyString_ appendWithNSString:@" "];
    }
    if ([((OrgJfugueTheoryNote *) nil_chk([self->noteWindow_ getPreviousNote])) isHarmonicNote] && [((OrgJfugueTheoryNote *) nil_chk([self->noteWindow_ getCurrentNote])) isFirstNote]) {
      (void) [((JavaLangStringBuffer *) nil_chk(self->lyString_)) appendWithNSString:@">"];
      (void) [self->lyString_ appendWithNSString:[self->noteWindow_ getPreviousNoteDuration]];
      (void) [self->lyString_ appendWithNSString:@" "];
      self->closeChord_ = NO;
    }
    else if (![((OrgJfugueTheoryNote *) nil_chk([self->noteWindow_ getCurrentNote])) isHarmonicNote]) {
      if ([self->noteWindow_ getSecondPreviousNote] == nil) {
        (void) [((JavaLangStringBuffer *) nil_chk(self->lyString_)) appendWithNSString:[self->noteWindow_ getPreviousNoteLy]];
      }
      (void) [((JavaLangStringBuffer *) nil_chk(self->lyString_)) appendWithNSString:[self->noteWindow_ getPreviousNoteDuration]];
      (void) [self->lyString_ appendWithNSString:@" "];
    }
    if ([((OrgJfugueTheoryNote *) nil_chk([self->noteWindow_ getPreviousNote])) isStartOfTie]) {
      (void) [((JavaLangStringBuffer *) nil_chk(self->lyString_)) appendWithNSString:@"~ "];
    }
  }
  OrgJfugueIntegrationLilyPondParserListener_logWithNSString_(self, JreStrcat("$@", @"Current note not handled: ", [self->noteWindow_ getCurrentNoteLy]));
  OrgJfugueIntegrationLilyPondParserListener_logWithNSString_(self, JreStrcat("$@", @"==> Save called, lyString after: ", self->lyString_));
  [self->noteWindow_ empty];
}

@implementation OrgJfugueIntegrationNoteWindow

- (void)logWithNSString:(NSString *)message {
  if (isDebug_) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:message];
  }
}

- (void)empty {
  secondPreviousNote_ = nil;
  previousNote_ = nil;
}

- (void)emptyAll {
  secondPreviousNote_ = nil;
  previousNote_ = nil;
  currentNote_ = nil;
  currentNoteLy_ = [[JavaLangStringBuffer alloc] init];
  currentNoteDuration_ = nil;
}

- (void)addNoteWithOrgJfugueTheoryNote:(OrgJfugueTheoryNote *)note {
  [self logWithNSString:[((OrgJfugueTheoryNote *) nil_chk(note)) toDebugString]];
  secondPreviousNote_ = previousNote_;
  secondPreviousNoteLy_ = previousNoteLy_;
  previousNote_ = currentNote_;
  previousNoteLy_ = [((JavaLangStringBuffer *) nil_chk(currentNoteLy_)) description];
  currentNoteLy_ = [[JavaLangStringBuffer alloc] init];
  currentNote_ = note;
  if (![note isRest]) {
    NSString *firstLetter = [((NSString *) nil_chk([((NSString *) nil_chk(note->originalString_)) substring:0 endIndex:1])) lowercaseString];
    (void) [currentNoteLy_ appendWithNSString:firstLetter];
    currentOctave_ = [note getOctave];
    if (((jint) [note->originalString_ length]) > 1) {
      NSString *secondLetter = [((NSString *) nil_chk([note->originalString_ substring:1 endIndex:2])) lowercaseString];
      [self logWithNSString:JreStrcat("$$", @"Second letter: ", secondLetter)];
      if ([((NSString *) nil_chk(secondLetter)) isEqual:@"b"]) {
        (void) [currentNoteLy_ appendWithNSString:@"es"];
      }
      else if ([secondLetter isEqual:@"#"]) {
        (void) [currentNoteLy_ appendWithNSString:@"is"];
      }
    }
    jint octaveChange = [self getOctaveChangeWithChar:[((NSString *) nil_chk(firstLetter)) charAtWithInt:0]];
    if (octaveChange > 0) {
      for (jint i = 0; i < octaveChange; i++) {
        [self logWithNSString:@"Add octave change"];
        (void) [currentNoteLy_ appendWithNSString:@"'"];
      }
    }
    if (octaveChange < 0) {
      for (jint i = 0; i > octaveChange; i--) {
        [self logWithNSString:@"Add octave change"];
        (void) [currentNoteLy_ appendWithNSString:@","];
      }
    }
    lastNote_ = [firstLetter charAtWithInt:0];
  }
  else {
    (void) [currentNoteLy_ appendWithNSString:@"r"];
  }
  secondPreviousNoteDuration_ = previousNoteDuration_;
  previousNoteDuration_ = currentNoteDuration_;
  currentNoteDuration_ = OrgJfugueIntegrationLilyPondNoteDurationHelper_getDuration2WithNSString_(JavaLangDouble_toStringWithDouble_([note getDuration]));
}

- (void)addChordOctaveWithOrgJfugueTheoryNote:(OrgJfugueTheoryNote *)rootNote {
  [self logWithNSString:JreStrcat("$$", @"chord rootnote: ", [((OrgJfugueTheoryNote *) nil_chk(rootNote)) toDebugString])];
  currentOctave_ = [rootNote getOctave];
  [self logWithNSString:JreStrcat("$I", @"Chord octave: ", currentOctave_)];
}

- (jint)getOctaveChangeWithChar:(jchar)currentNoteChar {
  jint octaveChange = currentOctave_ - lastOctave_;
  [self logWithNSString:JreStrcat("$I$I", @"Current octave: ", currentOctave_, @", last octave: ", lastOctave_)];
  jint lilypondChange = 0;
  if (previousNote_ != nil && ![previousNote_ isRest]) {
    lilypondChange = OrgJfugueIntegrationNoteWindow_lilypondRelativeDirectionWithChar_withChar_(self, [((NSString *) nil_chk([((NSString *) nil_chk(previousNote_->originalString_)) lowercaseString])) charAtWithInt:0], currentNoteChar);
  }
  else {
    lilypondChange = OrgJfugueIntegrationNoteWindow_lilypondRelativeDirectionWithChar_withChar_(self, lastNote_, currentNoteChar);
  }
  [self logWithNSString:JreStrcat("$I", @"LilyPond change: ", lilypondChange)];
  jint jfugueChange = 0;
  if (previousNote_ != nil && ![previousNote_ isRest]) {
    jfugueChange = OrgJfugueIntegrationNoteWindow_jfugueOctaveChangeWithChar_withChar_withInt_(self, [((NSString *) nil_chk([((NSString *) nil_chk(previousNote_->originalString_)) lowercaseString])) charAtWithInt:0], currentNoteChar, lilypondChange);
  }
  else {
    jfugueChange = OrgJfugueIntegrationNoteWindow_jfugueOctaveChangeWithChar_withChar_withInt_(self, lastNote_, currentNoteChar, lilypondChange);
  }
  octaveChange += jfugueChange;
  lastOctave_ = currentOctave_;
  return octaveChange;
}

- (jint)lilypondRelativeDirectionWithChar:(jchar)firstNote
                                 withChar:(jchar)secondNote {
  return OrgJfugueIntegrationNoteWindow_lilypondRelativeDirectionWithChar_withChar_(self, firstNote, secondNote);
}

- (jint)jfugueOctaveChangeWithChar:(jchar)firstNote
                          withChar:(jchar)secondNote
                           withInt:(jint)lilypondDirection {
  return OrgJfugueIntegrationNoteWindow_jfugueOctaveChangeWithChar_withChar_withInt_(self, firstNote, secondNote, lilypondDirection);
}

- (void)print {
  [self logWithNSString:JreStrcat("$$C$C$C$C@C$", @"Note window: ", secondPreviousNoteLy_, '&', secondPreviousNoteDuration_, '&', previousNoteLy_, '&', previousNoteDuration_, '&', currentNoteLy_, '&', currentNoteDuration_)];
}

- (OrgJfugueTheoryNote *)getCurrentNote {
  return currentNote_;
}

- (OrgJfugueTheoryNote *)getPreviousNote {
  return previousNote_;
}

- (OrgJfugueTheoryNote *)getSecondPreviousNote {
  return secondPreviousNote_;
}

- (JavaLangStringBuffer *)getCurrentNoteLy {
  return currentNoteLy_;
}

- (NSString *)getPreviousNoteLy {
  return previousNoteLy_;
}

- (NSString *)getSecondPreviousNoteLy {
  return secondPreviousNoteLy_;
}

- (NSString *)getCurrentNoteDuration {
  return currentNoteDuration_;
}

- (NSString *)getPreviousNoteDuration {
  return previousNoteDuration_;
}

- (NSString *)getSecondPreviousNoteDuration {
  return secondPreviousNoteDuration_;
}

- (jint)getCurrentOctave {
  return currentOctave_;
}

- (void)setCurrentOctaveWithInt:(jint)currentOctave {
  self->currentOctave_ = currentOctave;
}

- (jchar)getLastNote {
  return lastNote_;
}

- (void)setLastNoteWithChar:(jchar)lastNote {
  self->lastNote_ = lastNote;
}

- (jint)getLastOctave {
  return lastOctave_;
}

- (void)setLastOctaveWithInt:(jint)lastOctave {
  self->lastOctave_ = lastOctave;
}

- (instancetype)init {
  if (self = [super init]) {
    currentNote_ = nil;
    previousNote_ = nil;
    secondPreviousNote_ = nil;
    currentNoteLy_ = [[JavaLangStringBuffer alloc] init];
    currentNoteDuration_ = nil;
    previousNoteLy_ = nil;
    previousNoteDuration_ = nil;
    secondPreviousNoteLy_ = nil;
    secondPreviousNoteDuration_ = nil;
    currentOctave_ = 4;
    lastNote_ = 'c';
    lastOctave_ = 4;
    isDebug_ = NO;
  }
  return self;
}

- (void)copyAllFieldsTo:(OrgJfugueIntegrationNoteWindow *)other {
  [super copyAllFieldsTo:other];
  other->currentNote_ = currentNote_;
  other->previousNote_ = previousNote_;
  other->secondPreviousNote_ = secondPreviousNote_;
  other->currentNoteLy_ = currentNoteLy_;
  other->currentNoteDuration_ = currentNoteDuration_;
  other->previousNoteLy_ = previousNoteLy_;
  other->previousNoteDuration_ = previousNoteDuration_;
  other->secondPreviousNoteLy_ = secondPreviousNoteLy_;
  other->secondPreviousNoteDuration_ = secondPreviousNoteDuration_;
  other->currentOctave_ = currentOctave_;
  other->lastNote_ = lastNote_;
  other->lastOctave_ = lastOctave_;
  other->isDebug_ = isDebug_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "logWithNSString:", "log", "V", 0x0, NULL },
    { "empty", NULL, "V", 0x0, NULL },
    { "emptyAll", NULL, "V", 0x0, NULL },
    { "addNoteWithOrgJfugueTheoryNote:", "addNote", "V", 0x0, NULL },
    { "addChordOctaveWithOrgJfugueTheoryNote:", "addChordOctave", "V", 0x0, NULL },
    { "getOctaveChangeWithChar:", "getOctaveChange", "I", 0x0, NULL },
    { "lilypondRelativeDirectionWithChar:withChar:", "lilypondRelativeDirection", "I", 0x2, NULL },
    { "jfugueOctaveChangeWithChar:withChar:withInt:", "jfugueOctaveChange", "I", 0x2, NULL },
    { "print", NULL, "V", 0x0, NULL },
    { "getCurrentNote", NULL, "Lorg.jfugue.theory.Note;", 0x0, NULL },
    { "getPreviousNote", NULL, "Lorg.jfugue.theory.Note;", 0x0, NULL },
    { "getSecondPreviousNote", NULL, "Lorg.jfugue.theory.Note;", 0x0, NULL },
    { "getCurrentNoteLy", NULL, "Ljava.lang.StringBuffer;", 0x1, NULL },
    { "getPreviousNoteLy", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getSecondPreviousNoteLy", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getCurrentNoteDuration", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getPreviousNoteDuration", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getSecondPreviousNoteDuration", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getCurrentOctave", NULL, "I", 0x1, NULL },
    { "setCurrentOctaveWithInt:", "setCurrentOctave", "V", 0x1, NULL },
    { "getLastNote", NULL, "C", 0x1, NULL },
    { "setLastNoteWithChar:", "setLastNote", "V", 0x1, NULL },
    { "getLastOctave", NULL, "I", 0x1, NULL },
    { "setLastOctaveWithInt:", "setLastOctave", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "currentNote_", NULL, 0x2, "Lorg.jfugue.theory.Note;", NULL,  },
    { "previousNote_", NULL, 0x2, "Lorg.jfugue.theory.Note;", NULL,  },
    { "secondPreviousNote_", NULL, 0x2, "Lorg.jfugue.theory.Note;", NULL,  },
    { "currentNoteLy_", NULL, 0x2, "Ljava.lang.StringBuffer;", NULL,  },
    { "currentNoteDuration_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "previousNoteLy_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "previousNoteDuration_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "secondPreviousNoteLy_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "secondPreviousNoteDuration_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "currentOctave_", NULL, 0x2, "I", NULL,  },
    { "lastNote_", NULL, 0x2, "C", NULL,  },
    { "lastOctave_", NULL, 0x2, "I", NULL,  },
    { "isDebug_", NULL, 0x0, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJfugueIntegrationNoteWindow = { "NoteWindow", "org.jfugue.integration", NULL, 0x0, 25, methods, 13, fields, 0, NULL};
  return &_OrgJfugueIntegrationNoteWindow;
}

@end

jint OrgJfugueIntegrationNoteWindow_lilypondRelativeDirectionWithChar_withChar_(OrgJfugueIntegrationNoteWindow *self, jchar firstNote, jchar secondNote) {
  jchar curChar = firstNote;
  if (firstNote == secondNote) {
    return 0;
  }
  for (jint i = 1; i < 4; i++) {
    curChar++;
    if (curChar > 'g') {
      curChar = 'a';
    }
    if (curChar == secondNote) {
      return i;
    }
  }
  curChar = firstNote;
  for (jint i = 1; i < 4; i++) {
    curChar--;
    if (curChar < 'a') {
      curChar = 'g';
    }
    if (curChar == secondNote) {
      return -i;
    }
  }
  return 0;
}

jint OrgJfugueIntegrationNoteWindow_jfugueOctaveChangeWithChar_withChar_withInt_(OrgJfugueIntegrationNoteWindow *self, jchar firstNote, jchar secondNote, jint lilypondDirection) {
  [self logWithNSString:JreStrcat("$C$C", @"jfugue change: firstNote: ", firstNote, @", secondNote: ", secondNote)];
  jchar curChar = firstNote;
  jint steps = JavaLangMath_absWithInt_(lilypondDirection) + 1;
  for (jint i = 1; JavaLangMath_absWithInt_(i) < steps; i += 1) {
    if (lilypondDirection > 0) {
      curChar++;
      if (curChar > 'g') {
        curChar = 'a';
      }
      if ((firstNote < 'c' || firstNote >= 'g') && curChar > 'b') {
        return -1;
      }
    }
    else {
      curChar--;
      if (curChar < 'a') {
        curChar = 'g';
      }
      if ((firstNote >= 'c' && firstNote < 'f') && curChar < 'c') {
        return 1;
      }
    }
  }
  return 0;
}

@implementation OrgJfugueIntegrationLilyPondNoteDurationHelper

+ (NSString *)getDuration2WithNSString:(NSString *)duration {
  return OrgJfugueIntegrationLilyPondNoteDurationHelper_getDuration2WithNSString_(duration);
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getDuration2WithNSString:", "getDuration2", "Ljava.lang.String;", 0x8, NULL },
    { "init", NULL, NULL, 0x0, NULL },
  };
  static const J2ObjcClassInfo _OrgJfugueIntegrationLilyPondNoteDurationHelper = { "LilyPondNoteDurationHelper", "org.jfugue.integration", NULL, 0x0, 2, methods, 0, NULL, 0, NULL};
  return &_OrgJfugueIntegrationLilyPondNoteDurationHelper;
}

@end

NSString *OrgJfugueIntegrationLilyPondNoteDurationHelper_getDuration2WithNSString_(NSString *duration) {
  OrgJfugueIntegrationLilyPondNoteDurationHelper_init();
  NSString *durationLy = @"4";
  jdouble durationVal = JavaLangDouble_parseDoubleWithNSString_(duration);
  if (durationVal == 0.0625) {
    durationLy = @"16";
  }
  else if (durationVal == 0.125) {
    durationLy = @"8";
  }
  else if (durationVal == 0.25) {
    durationLy = @"4";
  }
  else if (durationVal == 0.375) {
    durationLy = @"4.";
  }
  else if (durationVal == 0.5) {
    durationLy = @"2";
  }
  else if (durationVal == 0.75) {
    durationLy = @"2.";
  }
  else if (durationVal == 1.0) {
    durationLy = @"1";
  }
  else if (durationVal == 2.0) {
    durationLy = @"\\breve";
  }
  else if (durationVal == 3.0) {
    durationLy = @"\\breve.";
  }
  else if (durationVal == 4.0) {
    durationLy = @"\\longa";
  }
  else {
    durationLy = @"4";
  }
  return durationLy;
}
