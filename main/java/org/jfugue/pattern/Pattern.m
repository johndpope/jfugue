//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: org/jfugue/pattern/Pattern.java
//

#include "IOSObjectArray.h"
#include "java/lang/Byte.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Map.h"
#include "org/jfugue/midi/MidiDictionary.h"
#include "org/jfugue/pattern/Pattern.h"
#include "org/jfugue/pattern/PatternProducer.h"
#include "org/staccato/IVLSubparser.h"
#include "org/staccato/NoteSubparser.h"
#include "org/staccato/TempoSubparser.h"

@implementation OrgJfuguePatternPattern

- (instancetype)initOrgJfuguePatternPattern {
  if (self = [super init]) {
    explicitVoice_ = OrgJfuguePatternPattern_UNDECLARED_EXPLICIT;
    explicitInstrument_ = OrgJfuguePatternPattern_UNDECLARED_EXPLICIT;
    explicitTempo_ = OrgJfuguePatternPattern_UNDECLARED_EXPLICIT;
    patternSB_ = [[JavaLangStringBuilder alloc] init];
  }
  return self;
}

- (instancetype)init {
  return [self initOrgJfuguePatternPattern];
}

- (instancetype)initWithNSString:(NSString *)pattern {
  if (self = [self initOrgJfuguePatternPattern]) {
    (void) [((JavaLangStringBuilder *) nil_chk(patternSB_)) appendWithNSString:pattern];
  }
  return self;
}

- (instancetype)initWithOrgJfuguePatternPatternProducerArray:(IOSObjectArray *)producers {
  if (self = [self initOrgJfuguePatternPattern]) {
    (void) [self addWithOrgJfuguePatternPatternProducerArray:producers];
  }
  return self;
}

- (OrgJfuguePatternPattern *)addWithOrgJfuguePatternPatternProducerArray:(IOSObjectArray *)producers {
  {
    IOSObjectArray *a__ = producers;
    id<OrgJfuguePatternPatternProducer> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<OrgJfuguePatternPatternProducer> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<OrgJfuguePatternPatternProducer> producer = *b__++;
      (void) [self addWithNSString:[((OrgJfuguePatternPattern *) nil_chk([((id<OrgJfuguePatternPatternProducer>) nil_chk(producer)) getPattern])) description]];
    }
  }
  return self;
}

- (OrgJfuguePatternPattern *)addWithNSString:(NSString *)string {
  if ([((JavaLangStringBuilder *) nil_chk(patternSB_)) sequenceLength] > 0) {
    (void) [patternSB_ appendWithNSString:@" "];
  }
  (void) [patternSB_ appendWithNSString:string];
  return self;
}

- (OrgJfuguePatternPattern *)addTrackWithInt:(jint)trackNumber
         withOrgJfuguePatternPatternProducer:(id<OrgJfuguePatternPatternProducer>)producer {
  (void) [((JavaLangStringBuilder *) nil_chk(patternSB_)) appendWithNSString:@" "];
  (void) [patternSB_ appendWithChar:OrgStaccatoIVLSubparser_VOICE];
  (void) [patternSB_ appendWithInt:trackNumber];
  (void) [patternSB_ appendWithNSString:@" "];
  (void) [patternSB_ appendWithId:producer];
  return self;
}

- (OrgJfuguePatternPattern *)clear {
  (void) [patternSB_ delete__WithInt:0 withInt:[((JavaLangStringBuilder *) nil_chk(patternSB_)) sequenceLength]];
  return self;
}

- (OrgJfuguePatternPattern *)repeatWithInt:(jint)n {
  OrgJfuguePatternPattern *p2 = [[OrgJfuguePatternPattern alloc] init];
  for (jint i = 0; i < n; i++) {
    (void) [p2 addWithNSString:[((JavaLangStringBuilder *) nil_chk(self->patternSB_)) description]];
  }
  self->patternSB_ = p2->patternSB_;
  return self;
}

- (OrgJfuguePatternPattern *)getPattern {
  return self;
}

- (NSString *)description {
  JavaLangStringBuilder *b2 = [[JavaLangStringBuilder alloc] init];
  if (explicitTempo_ != OrgJfuguePatternPattern_UNDECLARED_EXPLICIT) {
    (void) [b2 appendWithChar:OrgStaccatoTempoSubparser_TEMPO];
    (void) [b2 appendWithInt:explicitTempo_];
    (void) [b2 appendWithNSString:@" "];
  }
  if (explicitVoice_ != OrgJfuguePatternPattern_UNDECLARED_EXPLICIT) {
    (void) [b2 appendWithChar:OrgStaccatoIVLSubparser_VOICE];
    (void) [b2 appendWithInt:explicitVoice_];
    (void) [b2 appendWithNSString:@" "];
  }
  if (explicitInstrument_ != OrgJfuguePatternPattern_UNDECLARED_EXPLICIT) {
    (void) [b2 appendWithChar:OrgStaccatoIVLSubparser_INSTRUMENT];
    (void) [b2 appendWithNSString:@"["];
    (void) [b2 appendWithNSString:[((id<JavaUtilMap>) nil_chk(OrgJfugueMidiMidiDictionary_get_INSTRUMENT_BYTE_TO_STRING_())) getWithId:JavaLangByte_valueOfWithByte_((jbyte) explicitInstrument_)]];
    (void) [b2 appendWithNSString:@"] "];
  }
  (void) [b2 appendWithJavaLangCharSequence:patternSB_];
  return [b2 description];
}

- (OrgJfuguePatternPattern *)setTempoWithInt:(jint)explicitTempo {
  self->explicitTempo_ = explicitTempo;
  return self;
}

- (OrgJfuguePatternPattern *)setTempoWithNSString:(NSString *)tempo {
  if (![((id<JavaUtilMap>) nil_chk(OrgJfugueMidiMidiDictionary_get_TEMPO_STRING_TO_INT_())) containsKeyWithId:[((NSString *) nil_chk(tempo)) uppercaseString]]) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:JreStrcat("$$$", @"The tempo '", tempo, @"' is not recognized")];
  }
  return [self setTempoWithInt:[((JavaLangInteger *) nil_chk([OrgJfugueMidiMidiDictionary_get_TEMPO_STRING_TO_INT_() getWithId:[tempo uppercaseString]])) intValue]];
}

- (OrgJfuguePatternPattern *)setVoiceWithInt:(jint)voice {
  self->explicitVoice_ = voice;
  return self;
}

- (OrgJfuguePatternPattern *)setInstrumentWithInt:(jint)instrument {
  self->explicitInstrument_ = instrument;
  return self;
}

- (OrgJfuguePatternPattern *)setInstrumentWithNSString:(NSString *)instrument {
  if (![((id<JavaUtilMap>) nil_chk(OrgJfugueMidiMidiDictionary_get_INSTRUMENT_STRING_TO_BYTE_())) containsKeyWithId:[((NSString *) nil_chk(instrument)) uppercaseString]]) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:JreStrcat("$$$", @"The instrument '", instrument, @"' is not recognized")];
  }
  return [self setInstrumentWithInt:[((JavaLangByte *) nil_chk([OrgJfugueMidiMidiDictionary_get_INSTRUMENT_STRING_TO_BYTE_() getWithId:[instrument uppercaseString]])) charValue]];
}

- (OrgJfuguePatternPattern *)addToEachNoteElementWithNSString:(NSString *)decoratorString {
  JavaLangStringBuilder *b2 = [[JavaLangStringBuilder alloc] init];
  jint currentDecorator = 0;
  IOSObjectArray *decorators = [((NSString *) nil_chk(decoratorString)) split:@" "];
  IOSObjectArray *elements = [((NSString *) nil_chk([((JavaLangStringBuilder *) nil_chk(patternSB_)) description])) split:@" "];
  {
    IOSObjectArray *a__ = elements;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *element = *b__++;
      if ([((OrgStaccatoNoteSubparser *) nil_chk(OrgStaccatoNoteSubparser_getInstance())) matchesWithNSString:element]) {
        (void) [b2 appendWithNSString:element];
        (void) [b2 appendWithNSString:IOSObjectArray_Get(decorators, currentDecorator++ % ((IOSObjectArray *) nil_chk(decorators))->size_)];
      }
      else {
        (void) [b2 appendWithNSString:element];
      }
      (void) [b2 appendWithNSString:@" "];
    }
  }
  self->patternSB_ = [[JavaLangStringBuilder alloc] initWithNSString:[((NSString *) nil_chk([b2 description])) trim]];
  return self;
}

- (void)copyAllFieldsTo:(OrgJfuguePatternPattern *)other {
  [super copyAllFieldsTo:other];
  other->patternSB_ = patternSB_;
  other->explicitVoice_ = explicitVoice_;
  other->explicitInstrument_ = explicitInstrument_;
  other->explicitTempo_ = explicitTempo_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Pattern", NULL, 0x1, NULL },
    { "initWithNSString:", "Pattern", NULL, 0x1, NULL },
    { "initWithOrgJfuguePatternPatternProducerArray:", "Pattern", NULL, 0x81, NULL },
    { "addWithOrgJfuguePatternPatternProducerArray:", "add", "Lorg.jfugue.pattern.Pattern;", 0x81, NULL },
    { "addWithNSString:", "add", "Lorg.jfugue.pattern.Pattern;", 0x1, NULL },
    { "addTrackWithInt:withOrgJfuguePatternPatternProducer:", "addTrack", "Lorg.jfugue.pattern.Pattern;", 0x1, NULL },
    { "clear", NULL, "Lorg.jfugue.pattern.Pattern;", 0x1, NULL },
    { "repeatWithInt:", "repeat", "Lorg.jfugue.pattern.Pattern;", 0x1, NULL },
    { "getPattern", NULL, "Lorg.jfugue.pattern.Pattern;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "setTempoWithInt:", "setTempo", "Lorg.jfugue.pattern.Pattern;", 0x1, NULL },
    { "setTempoWithNSString:", "setTempo", "Lorg.jfugue.pattern.Pattern;", 0x1, NULL },
    { "setVoiceWithInt:", "setVoice", "Lorg.jfugue.pattern.Pattern;", 0x1, NULL },
    { "setInstrumentWithInt:", "setInstrument", "Lorg.jfugue.pattern.Pattern;", 0x1, NULL },
    { "setInstrumentWithNSString:", "setInstrument", "Lorg.jfugue.pattern.Pattern;", 0x1, NULL },
    { "addToEachNoteElementWithNSString:", "addToEachNoteElement", "Lorg.jfugue.pattern.Pattern;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "patternSB_", NULL, 0x4, "Ljava.lang.StringBuilder;", NULL,  },
    { "explicitVoice_", NULL, 0x2, "I", NULL,  },
    { "explicitInstrument_", NULL, 0x2, "I", NULL,  },
    { "explicitTempo_", NULL, 0x2, "I", NULL,  },
    { "UNDECLARED_EXPLICIT_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJfuguePatternPattern_UNDECLARED_EXPLICIT },
  };
  static const J2ObjcClassInfo _OrgJfuguePatternPattern = { "Pattern", "org.jfugue.pattern", NULL, 0x1, 16, methods, 5, fields, 0, NULL};
  return &_OrgJfuguePatternPattern;
}

@end
