//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: org/staccato/functions/DefaultPreprocessorFunction.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Byte.h"
#include "java/lang/Double.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/RuntimeException.h"
#include "org/staccato/DefaultManager.h"
#include "org/staccato/StaccatoParserContext.h"
#include "org/staccato/functions/DefaultPreprocessorFunction.h"

@implementation OrgStaccatoFunctionsDefaultPreprocessorFunction

OrgStaccatoFunctionsDefaultPreprocessorFunction * OrgStaccatoFunctionsDefaultPreprocessorFunction_instance_;
NSString * OrgStaccatoFunctionsDefaultPreprocessorFunction_OCTAVE_ = @"OCTAVE";
NSString * OrgStaccatoFunctionsDefaultPreprocessorFunction_BASE_OCTAVE_ = @"BASS_OCTAVE";
NSString * OrgStaccatoFunctionsDefaultPreprocessorFunction_DURATION_ = @"DURATION";
NSString * OrgStaccatoFunctionsDefaultPreprocessorFunction_ATTACK_ = @"ATTACK";
NSString * OrgStaccatoFunctionsDefaultPreprocessorFunction_DECAY_ = @"DECAY";

- (instancetype)init {
  if (self = [super init]) {
    NAMES_ = [IOSObjectArray newArrayWithObjects:(id[]){ @"DEFAULT", @"DEFAULTS" } count:2 type:[IOSClass classWithClass:[NSString class]]];
  }
  return self;
}

+ (OrgStaccatoFunctionsDefaultPreprocessorFunction *)getInstance {
  return OrgStaccatoFunctionsDefaultPreprocessorFunction_getInstance();
}

- (NSString *)applyWithNSString:(NSString *)parameters
withOrgStaccatoStaccatoParserContext:(OrgStaccatoStaccatoParserContext *)context {
  IOSObjectArray *defaultSettings = [((NSString *) nil_chk(parameters)) split:@","];
  {
    IOSObjectArray *a__ = defaultSettings;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *defaultSetting = *b__++;
      IOSObjectArray *defaultValues = [((NSString *) nil_chk(defaultSetting)) split:@"="];
      if (((IOSObjectArray *) nil_chk(defaultValues))->size_ != 2) {
        @throw [[JavaLangRuntimeException alloc] initWithNSString:JreStrcat("$$", @"DefaultProcessor found this setting, which is not in the form KEY=VALUE: ", defaultSetting)];
      }
      NSString *key = IOSObjectArray_Get(defaultValues, 0);
      NSString *value = IOSObjectArray_Get(defaultValues, 1);
      if ([((NSString *) nil_chk(key)) equalsIgnoreCase:OrgStaccatoFunctionsDefaultPreprocessorFunction_OCTAVE_]) {
        [((OrgStaccatoDefaultManager *) nil_chk(OrgStaccatoDefaultManager_getInstance())) setDefaultOctaveWithByte:JavaLangByte_parseByteWithNSString_(value)];
      }
      else if ([key equalsIgnoreCase:OrgStaccatoFunctionsDefaultPreprocessorFunction_BASE_OCTAVE_]) {
        [((OrgStaccatoDefaultManager *) nil_chk(OrgStaccatoDefaultManager_getInstance())) setDefaultBassOctaveWithByte:JavaLangByte_parseByteWithNSString_(value)];
      }
      else if ([key equalsIgnoreCase:OrgStaccatoFunctionsDefaultPreprocessorFunction_DURATION_]) {
        jdouble dur = 0.0;
        @try {
          dur = JavaLangDouble_parseDoubleWithNSString_(value);
          [((OrgStaccatoDefaultManager *) nil_chk(OrgStaccatoDefaultManager_getInstance())) setDefaultDurationWithDouble:dur];
        }
        @catch (JavaLangNumberFormatException *e) {
          @throw [[JavaLangRuntimeException alloc] initWithNSString:JreStrcat("$$", @"Currently, default duration must be specified as a decimal. For example, please use 0.5 for 'h', 0.25 for 'q', and so on. You had entered: ", value)];
        }
      }
      else if ([key equalsIgnoreCase:OrgStaccatoFunctionsDefaultPreprocessorFunction_ATTACK_]) {
        [((OrgStaccatoDefaultManager *) nil_chk(OrgStaccatoDefaultManager_getInstance())) setDefaultAttackVelocityWithByte:JavaLangByte_parseByteWithNSString_(value)];
      }
      else if ([key equalsIgnoreCase:OrgStaccatoFunctionsDefaultPreprocessorFunction_DECAY_]) {
        [((OrgStaccatoDefaultManager *) nil_chk(OrgStaccatoDefaultManager_getInstance())) setDefaultDecayVelocityWithByte:JavaLangByte_parseByteWithNSString_(value)];
      }
      else {
        @throw [[JavaLangRuntimeException alloc] initWithNSString:JreStrcat("$$$$$$$$$$$$", @"DefaultProcessor found this setting where the key is not recognized: ", defaultSetting, @" (key should be one of the following: ", OrgStaccatoFunctionsDefaultPreprocessorFunction_OCTAVE_, @", ", OrgStaccatoFunctionsDefaultPreprocessorFunction_BASE_OCTAVE_, @", ", OrgStaccatoFunctionsDefaultPreprocessorFunction_DURATION_, @", ", OrgStaccatoFunctionsDefaultPreprocessorFunction_ATTACK_, @", or ", OrgStaccatoFunctionsDefaultPreprocessorFunction_DECAY_)];
      }
    }
  }
  return @"";
}

- (IOSObjectArray *)getNames {
  return NAMES_;
}

- (void)copyAllFieldsTo:(OrgStaccatoFunctionsDefaultPreprocessorFunction *)other {
  [super copyAllFieldsTo:other];
  other->NAMES_ = NAMES_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "DefaultPreprocessorFunction", NULL, 0x2, NULL },
    { "getInstance", NULL, "Lorg.staccato.functions.DefaultPreprocessorFunction;", 0x9, NULL },
    { "applyWithNSString:withOrgStaccatoStaccatoParserContext:", "apply", "Ljava.lang.String;", 0x1, NULL },
    { "getNames", NULL, "[Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "instance_", NULL, 0xa, "Lorg.staccato.functions.DefaultPreprocessorFunction;", &OrgStaccatoFunctionsDefaultPreprocessorFunction_instance_,  },
    { "OCTAVE_", NULL, 0xa, "Ljava.lang.String;", &OrgStaccatoFunctionsDefaultPreprocessorFunction_OCTAVE_,  },
    { "BASE_OCTAVE_", NULL, 0xa, "Ljava.lang.String;", &OrgStaccatoFunctionsDefaultPreprocessorFunction_BASE_OCTAVE_,  },
    { "DURATION_", NULL, 0xa, "Ljava.lang.String;", &OrgStaccatoFunctionsDefaultPreprocessorFunction_DURATION_,  },
    { "ATTACK_", NULL, 0xa, "Ljava.lang.String;", &OrgStaccatoFunctionsDefaultPreprocessorFunction_ATTACK_,  },
    { "DECAY_", NULL, 0xa, "Ljava.lang.String;", &OrgStaccatoFunctionsDefaultPreprocessorFunction_DECAY_,  },
    { "NAMES_", NULL, 0x2, "[Ljava.lang.String;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgStaccatoFunctionsDefaultPreprocessorFunction = { "DefaultPreprocessorFunction", "org.staccato.functions", NULL, 0x1, 4, methods, 7, fields, 0, NULL};
  return &_OrgStaccatoFunctionsDefaultPreprocessorFunction;
}

@end

OrgStaccatoFunctionsDefaultPreprocessorFunction *OrgStaccatoFunctionsDefaultPreprocessorFunction_getInstance() {
  OrgStaccatoFunctionsDefaultPreprocessorFunction_init();
  if (OrgStaccatoFunctionsDefaultPreprocessorFunction_instance_ == nil) {
    OrgStaccatoFunctionsDefaultPreprocessorFunction_instance_ = [[OrgStaccatoFunctionsDefaultPreprocessorFunction alloc] init];
  }
  return OrgStaccatoFunctionsDefaultPreprocessorFunction_instance_;
}
