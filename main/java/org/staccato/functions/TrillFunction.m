//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: org/staccato/functions/TrillFunction.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "org/jfugue/provider/NoteProvider.h"
#include "org/jfugue/provider/NoteProviderFactory.h"
#include "org/jfugue/theory/Note.h"
#include "org/staccato/StaccatoParserContext.h"
#include "org/staccato/functions/TrillFunction.h"

BOOL OrgStaccatoFunctionsTrillFunction_initialized = NO;

@implementation OrgStaccatoFunctionsTrillFunction

OrgStaccatoFunctionsTrillFunction * OrgStaccatoFunctionsTrillFunction_instance_;
IOSObjectArray * OrgStaccatoFunctionsTrillFunction_NAMES_;

- (instancetype)init {
  return [super init];
}

+ (OrgStaccatoFunctionsTrillFunction *)getInstance {
  return OrgStaccatoFunctionsTrillFunction_getInstance();
}

- (NSString *)applyWithNSString:(NSString *)parameters
withOrgStaccatoStaccatoParserContext:(OrgStaccatoStaccatoParserContext *)context {
  JavaLangStringBuilder *buddy = [[JavaLangStringBuilder alloc] init];
  {
    IOSObjectArray *a__ = [((NSString *) nil_chk(parameters)) split:@" "];
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *noteString = *b__++;
      @try {
        OrgJfugueTheoryNote *note = [((id<OrgJfugueProviderNoteProvider>) nil_chk(OrgJfugueProviderNoteProviderFactory_getNoteProvider())) createNoteWithNSString:noteString];
        jint n = J2ObjCFpToInt(([((OrgJfugueTheoryNote *) nil_chk(note)) getDuration] / OrgStaccatoFunctionsTrillFunction_THIRTY_SECOND_DURATION));
        for (jint i = 0; i < n / 2; i++) {
          (void) [buddy appendWithNSString:OrgJfugueTheoryNote_getToneStringWithByte_((jbyte) [note getValue])];
          (void) [buddy appendWithNSString:@"t "];
          (void) [buddy appendWithNSString:OrgJfugueTheoryNote_getToneStringWithByte_((jbyte) ([note getValue] + 2))];
          (void) [buddy appendWithNSString:@"t "];
        }
      }
      @catch (JavaLangException *e) {
      }
    }
  }
  return [((NSString *) nil_chk([buddy description])) trim];
}

- (IOSObjectArray *)getNames {
  return OrgStaccatoFunctionsTrillFunction_NAMES_;
}

+ (void)initialize {
  if (self == [OrgStaccatoFunctionsTrillFunction class]) {
    OrgStaccatoFunctionsTrillFunction_NAMES_ = [IOSObjectArray newArrayWithObjects:(id[]){ @"TRILL", @"TR" } count:2 type:[IOSClass classWithClass:[NSString class]]];
    J2OBJC_SET_INITIALIZED(OrgStaccatoFunctionsTrillFunction)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "TrillFunction", NULL, 0x2, NULL },
    { "getInstance", NULL, "Lorg.staccato.functions.TrillFunction;", 0x9, NULL },
    { "applyWithNSString:withOrgStaccatoStaccatoParserContext:", "apply", "Ljava.lang.String;", 0x1, NULL },
    { "getNames", NULL, "[Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "instance_", NULL, 0xa, "Lorg.staccato.functions.TrillFunction;", &OrgStaccatoFunctionsTrillFunction_instance_,  },
    { "NAMES_", NULL, 0x1a, "[Ljava.lang.String;", &OrgStaccatoFunctionsTrillFunction_NAMES_,  },
    { "THIRTY_SECOND_DURATION_", NULL, 0x1a, "D", NULL, .constantValue.asDouble = OrgStaccatoFunctionsTrillFunction_THIRTY_SECOND_DURATION },
  };
  static const J2ObjcClassInfo _OrgStaccatoFunctionsTrillFunction = { "TrillFunction", "org.staccato.functions", NULL, 0x1, 4, methods, 3, fields, 0, NULL};
  return &_OrgStaccatoFunctionsTrillFunction;
}

@end

OrgStaccatoFunctionsTrillFunction *OrgStaccatoFunctionsTrillFunction_getInstance() {
  OrgStaccatoFunctionsTrillFunction_init();
  if (OrgStaccatoFunctionsTrillFunction_instance_ == nil) {
    OrgStaccatoFunctionsTrillFunction_instance_ = [[OrgStaccatoFunctionsTrillFunction alloc] init];
  }
  return OrgStaccatoFunctionsTrillFunction_instance_;
}
