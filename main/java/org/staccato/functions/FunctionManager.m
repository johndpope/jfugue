//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: org/staccato/functions/FunctionManager.java
//

#include "IOSObjectArray.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "org/staccato/PreprocessorFunction.h"
#include "org/staccato/SubparserFunction.h"
#include "org/staccato/functions/FunctionManager.h"

@implementation OrgStaccatoFunctionsFunctionManager

OrgStaccatoFunctionsFunctionManager * OrgStaccatoFunctionsFunctionManager_instance_;

+ (OrgStaccatoFunctionsFunctionManager *)getInstance {
  return OrgStaccatoFunctionsFunctionManager_getInstance();
}

- (instancetype)init {
  if (self = [super init]) {
    self->preprocessorFunctions_ = [[JavaUtilHashMap alloc] init];
    self->subparserFunctions_ = [[JavaUtilHashMap alloc] init];
  }
  return self;
}

- (void)addPreprocessorFunctionWithOrgStaccatoPreprocessorFunction:(id<OrgStaccatoPreprocessorFunction>)function {
  {
    IOSObjectArray *a__ = [((id<OrgStaccatoPreprocessorFunction>) nil_chk(function)) getNames];
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *name = *b__++;
      (void) [((id<JavaUtilMap>) nil_chk(preprocessorFunctions_)) putWithId:[((NSString *) nil_chk(name)) uppercaseString] withId:function];
    }
  }
}

- (void)removePreprocessorFunctionWithOrgStaccatoPreprocessorFunction:(id<OrgStaccatoPreprocessorFunction>)function {
  {
    IOSObjectArray *a__ = [((id<OrgStaccatoPreprocessorFunction>) nil_chk(function)) getNames];
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *name = *b__++;
      (void) [((id<JavaUtilMap>) nil_chk(preprocessorFunctions_)) removeWithId:[((NSString *) nil_chk(name)) uppercaseString]];
    }
  }
}

- (id<OrgStaccatoPreprocessorFunction>)getPreprocessorFunctionWithNSString:(NSString *)name {
  return [((id<JavaUtilMap>) nil_chk(preprocessorFunctions_)) getWithId:[((NSString *) nil_chk(name)) uppercaseString]];
}

- (void)addSubparserFunctionWithOrgStaccatoSubparserFunction:(id<OrgStaccatoSubparserFunction>)function {
  {
    IOSObjectArray *a__ = [((id<OrgStaccatoSubparserFunction>) nil_chk(function)) getNames];
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *name = *b__++;
      (void) [((id<JavaUtilMap>) nil_chk(subparserFunctions_)) putWithId:[((NSString *) nil_chk(name)) uppercaseString] withId:function];
    }
  }
}

- (void)removeSubparserFunctionWithOrgStaccatoSubparserFunction:(id<OrgStaccatoSubparserFunction>)function {
  {
    IOSObjectArray *a__ = [((id<OrgStaccatoSubparserFunction>) nil_chk(function)) getNames];
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *name = *b__++;
      (void) [((id<JavaUtilMap>) nil_chk(subparserFunctions_)) removeWithId:[((NSString *) nil_chk(name)) uppercaseString]];
    }
  }
}

- (id<OrgStaccatoSubparserFunction>)getSubparserFunctionWithNSString:(NSString *)name {
  return [((id<JavaUtilMap>) nil_chk(subparserFunctions_)) getWithId:[((NSString *) nil_chk(name)) uppercaseString]];
}

- (void)copyAllFieldsTo:(OrgStaccatoFunctionsFunctionManager *)other {
  [super copyAllFieldsTo:other];
  other->preprocessorFunctions_ = preprocessorFunctions_;
  other->subparserFunctions_ = subparserFunctions_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getInstance", NULL, "Lorg.staccato.functions.FunctionManager;", 0x9, NULL },
    { "init", "FunctionManager", NULL, 0x2, NULL },
    { "addPreprocessorFunctionWithOrgStaccatoPreprocessorFunction:", "addPreprocessorFunction", "V", 0x1, NULL },
    { "removePreprocessorFunctionWithOrgStaccatoPreprocessorFunction:", "removePreprocessorFunction", "V", 0x1, NULL },
    { "getPreprocessorFunctionWithNSString:", "getPreprocessorFunction", "Lorg.staccato.PreprocessorFunction;", 0x1, NULL },
    { "addSubparserFunctionWithOrgStaccatoSubparserFunction:", "addSubparserFunction", "V", 0x1, NULL },
    { "removeSubparserFunctionWithOrgStaccatoSubparserFunction:", "removeSubparserFunction", "V", 0x1, NULL },
    { "getSubparserFunctionWithNSString:", "getSubparserFunction", "Lorg.staccato.SubparserFunction;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "instance_", NULL, 0xa, "Lorg.staccato.functions.FunctionManager;", &OrgStaccatoFunctionsFunctionManager_instance_,  },
    { "preprocessorFunctions_", NULL, 0x2, "Ljava.util.Map;", NULL,  },
    { "subparserFunctions_", NULL, 0x2, "Ljava.util.Map;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgStaccatoFunctionsFunctionManager = { "FunctionManager", "org.staccato.functions", NULL, 0x1, 8, methods, 3, fields, 0, NULL};
  return &_OrgStaccatoFunctionsFunctionManager;
}

@end

OrgStaccatoFunctionsFunctionManager *OrgStaccatoFunctionsFunctionManager_getInstance() {
  OrgStaccatoFunctionsFunctionManager_init();
  if (OrgStaccatoFunctionsFunctionManager_instance_ == nil) {
    OrgStaccatoFunctionsFunctionManager_instance_ = [[OrgStaccatoFunctionsFunctionManager alloc] init];
  }
  return OrgStaccatoFunctionsFunctionManager_instance_;
}
